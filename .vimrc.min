if &compatible
  set nocompatible
endif

" environment {{{1
let $VIM_CACHE = $HOME . '/.cache/vim'

let s:is_mac = has('mac') || has('macunix') || has('gui_macvim') || (executable('uname') && system('uname') =~? '^darwin')
let s:is_win = has('win16') || has('win32') || has('win64')
set runtimepath^=$HOME/.vim/local_bundle

function! s:mkdir(path)
  if !isdirectory(a:path)
    call mkdir(a:path, 'p')
  endif
endfunction

function! s:has_plugin(plugin)
  if exists(':NeoBundle')
    return neobundle#is_installed(a:plugin)
  endif
  " return strlen(globpath(&runtimepath, '*/'.a:plugin))
  return 0
endfunction

augroup vimrc-myautocmd
  autocmd!
augroup END
command! -bang -nargs=* MyAutoCmd autocmd<bang> vimrc-myautocmd <args>
command! -nargs=* Lazy autocmd vimrc-myautocmd VimEnter * <args>
" }}}
" basic settings {{{1
" {{{2
" set encoding=japan
" if s:is_win
"   set termencoding=cp932
set encoding=utf-8
set termencoding=utf-8
scriptencoding utf-8
" set fileencoding=utf-8
set fileformat=unix
set fileencodings=ucs-bom,utf-8,iso-2022-jp,cp932,euc-jp
set fileformats=unix,dos,mac

set display=lastline
set clipboard=unnamed
if has('unnamedplus')
  set clipboard+=unnamedplus
endif
if !s:is_win
  if empty($SHELL)
    set shell=sh shellredir=>%s\ 2>&1
  elseif stridx($SHELL, " ") != -1
    execute 'set shell='.strpart($SHELL, 0, stridx($SHELL, " "))
  endif
endif

set nospell
" set spell
if v:version > 704 || (v:version == 704 && has('patch088'))
  set spelllang=en_us,cjk
else
  set spelllang=en_us
endif
set spellfile=~/.vim/spell/spellfile.utf-8.add
if exists('+autochdir')
  set noautochdir
endif
set shellslash
set directory=$VIM_CACHE,/var/tmp,/tmp
call s:mkdir($VIM_CACHE)

set viminfo+=! viminfo+=n$VIM_CACHE/pager-viminfo.txt

" Use vsplit mode http://qiita.com/kefir_/items/c725731d33de4d8fb096
if has("vim_starting") && !has('gui_running') && has('vertsplit')
  function! g:EnableVsplitMode()
    " enable origin mode and left/right margins
    let &t_CS = "y"
    let &t_ti = &t_ti . "\e[?6;69h"
    let &t_te = "\e[?6;69l\e[999H" . &t_te
    let &t_CV = "\e[%i%p1%d;%p2%ds"
    call writefile([ "\e[?6;69h" ], "/dev/tty", "a")
  endfunction

  " old vim does not ignore CPR
  map <special> <Esc>[3;9R <Nop>

  " new vim can't handle CPR with direct mapping
  " map <expr> ^[[3;3R g:EnableVsplitMode()
  set t_F9=[3;3R

  map <expr> <t_F9> g:EnableVsplitMode()
  let &t_RV .= "\e[?6;69h\e[1;3s\e[3;9H\e[6n\e[0;0s\e[?6;69l"
endif

" diff {{{2
set diffopt-=filler diffopt+=iwhite diffopt+=vertical

" display {{{2
set lazyredraw ttyfast
set scrolloff=10000000
set sidescrolloff=999
set number ruler

if has('mouse')
  set mouse=nch
  set nomousefocus
  set mousehide
endif
set timeoutlen=1000
set ttimeoutlen=50

set showmatch showcmd showfulltag
set backspace=indent,eol,start
set nolinebreak
set textwidth=1000
set formatoptions+=mM
set whichwrap=b,s,h,l,<,>,[,]

set splitbelow splitright
set switchbuf=useopen
set title

set hidden
set sidescroll=5
set visualbell
set noerrorbells t_vb=

set guioptions+=T guioptions-=m guioptions-=M
let did_install_syntax_menu = 1
set noequalalways
set langmenu=none
set helplang=ja,en
set keywordprg=":help"
if has('folding')
  set foldmethod=marker
endif

" tab character {{{2
set autoindent nosmartindent cindent
if has('linebreak') && (v:version > 704 || v:version == 704 && has('patch338'))
  set breakindent
endif
set list
set listchars=tab:^\ ,trail:~,nbsp:%,extends:>,precedes:<
set smarttab             " インテリジェンスなタブ入力
set noexpandtab
"set softtabstop=4 tabstop=4 shiftwidth=4
set softtabstop=0 tabstop=2 shiftwidth=2

if exists('&ambiwidth')
  set ambiwidth=double
endif


set nowrap
set nrformats-=octal
set updatetime=200
if has('winaltkeys')
  set winaltkeys=no
endif
set pastetoggle=<F10>
MyAutoCmd InsertLeave * if &paste | set nopaste | endif
set modeline
set modelines=10

" search {{{2
set ignorecase smartcase wrapscan
set infercase
set incsearch hlsearch
set virtualedit+=block

" backup {{{2
set nobackup noswapfile nowritebackup
set autoread
set backupcopy=yes
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*.tmp,crontab.*
set backupdir=$VIM_CACHE/vim-backups
set viewdir=$VIM_CACHE/vim-views
call s:mkdir(&backupdir)
call s:mkdir(&viewdir)
if has('persistent_undo')
  set undodir=$VIM_CACHE/vim-undo
  call s:mkdir(&undodir)
  set undofile
endif

" completion {{{2
set wildmenu
set wildmode=list:longest,full
set wildchar=<tab>
set wildignore+=*.o,*.obj,.git,*.rbc,.class,.svn
set wildignore+=*DS_Store*,*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.pdf,*.dmg
set wildignore+=*.luac,*.jar,*.pyc,*.stats
set completeopt=menuone,preview
set complete=.,w,b,u,t,i,k

" statusline {{{2
set laststatus=2
set modeline
set modelines=10
function! MyStatusLine()
  let s = ''
  if &paste
    let s .= 'PASTE|'
  else
    let s .= ' '
  endif
  let modes = {
    \ 'V': 'V-L', "\<C-v>": 'V-B',
    \ 'S': 'S-L', "\<C-s>": 'S-B'
    \ }
  let m = mode()
  let s .= get(modes, m, toupper(m))."|"
  let s .= '%<'
  let s .= '%f ' " filename
  let s .= '%m' " modified flag
  let s .= '%r' " readonly flag
  let s .= '%h' " help flag
  let s .= '%w' " preview flag
  let s .= '%='
  let s .= '[%{&l:fenc}]'
  let s .= '[%{&l:ff}] %{&l:ft} '
  let s .= '< L%l:%c%V ' " current line status
  let s .= '%8P'
  return s
endfunction
set statusline=%!MyStatusLine()

" diff {{{2
function! s:exe_if_diff(s)
  if &diff
    execute a:s
  endif
endfunction
command! -nargs=0 DiffQuit call s:exe_if_diff('diffoff')
command! -nargs=0 DQ call s:exe_if_diff('diffoff')
if has('user_commands')
  MyAutoCmd InsertLeave call s:exe_if_diff('diffupdate')
endif

" }}}

" mappings {{{1
nnoremap q <Nop>
nnoremap Q q

nnoremap / :nohl<CR>/
nnoremap ? :nohl<CR>?

let g:square_brackets = {
  \ '_diff': '^<<<<<<<\|^=======^>>>>>>>'
  \ }
function! s:nmap_square_brackets()
    if &diff && exists('g:square_brackets["_diff"]')
      nnoremap <silent><buffer> ]] :<C-u>call search(g:square_brackets["_diff"], "W")<CR>
      nnoremap <silent><buffer> [[ :<C-u>call search(g:square_brackets["_diff"], "Wb")<CR>
  endif
endfunction
MyAutoCmd FileType * call s:nmap_square_brackets()

function! s:tselect_immediately(...)
  return get(a:000, 0, '') . (len(taglist(expand('<cword>'))) > 1 ? 'g' : '')."\<C-]>"
  " execute 'normal!' (len(taglist(expand('<cword>'))) > 1 ? 'g' : '')."\<C-]>"
endfunction

noremap [!t] <Nop>
nmap t [!t]

nnoremap <silent> [!t]e t
nnoremap <silent> [!t]2 t"
nnoremap <silent> [!t]7 t'
nnoremap <silent> [!t]8 t(
nnoremap <silent> [!t]9 t)
nnoremap <silent> [!t][ t[
nnoremap <silent> [!t]] t]

nnoremap <silent><expr> [!t]t <SID>tselect_immediately()
nnoremap <silent><expr> <C-w>tt <SID>tselect_immediately("\<C-w>")
nnoremap <silent> [!t]j :<C-u>tag<CR>
nnoremap <silent> [!t]k :<C-u>pop<CR>
nnoremap <silent> [!t]l :<C-u>tselect<CR>

" for i in range(10)
"   execute 'nnoremap <silent>' ('[!t]'.i) (((i+10) % 10).'gt')
" endfor
" unlet i
nnoremap <silent> [!t]n gt
nnoremap <silent> [!t]p gT
nnoremap <silent> [!t]h gT
nnoremap <silent> [!t]l gt
nnoremap <silent> [!t]c :<C-u>tabnew<CR>
nnoremap <silent> [!t]C :<C-u>tabnew %<CR>
nnoremap <silent> [!t]* :<C-u>tabedit %<CR>*
nnoremap <silent> [!t]# :<C-u>tabedit %<CR>#
nnoremap <silent> [!t]q :<C-u>tabclose<CR>

"
nnoremap <C-w><Space> <C-w>p
nnoremap *  *N
nnoremap #  #n
nnoremap <C-w>*  <C-w>s*N
nnoremap <C-w>#  <C-w>s#n

if exists(':tmap')
  nnoremap <C-w><C-n> :tabnext<CR>
  nnoremap <C-w><C-p> :tabprev<CR>
  nnoremap <C-w><C-c> :tabnew<CR>
  " tmaps
  tnoremap <C-w><C-n> <C-w>:tabnext<CR>
  tnoremap <C-w><C-p> <C-w>:tabprev<CR>
  tnoremap <C-w><C-c> <C-w>:tabnew<CR>
  tnoremap <C-\><C-\> <C-\><C-n>
  " tnoremap <Esc> <C-\><C-n>
endif

inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-d> <Delete>
inoremap <C-a> <Home>
inoremap <expr><C-e> pumvisible() ? "\<C-e>" : "\<End>"

inoremap <C-]>a <Home>
inoremap <C-]>e <End>
inoremap <C-]>f <S-Right>
inoremap <C-]>b <S-Left>
inoremap <C-]>d <Delete>
inoremap <C-]><C-a> <Home>
inoremap <C-]><C-e> <End>
inoremap <C-]><C-f> <S-Right>
inoremap <C-]><C-b> <S-Left>
inoremap <C-]><C-d> <Delete>

inoremap <C-w> <C-g>u<C-w>
inoremap <C-u> <C-g>u<C-u>

onoremap aa a>
vnoremap aa a>
onoremap ia i>
vnoremap ia i>
onoremap ar a]
vnoremap ar a]
onoremap ir i]
vnoremap ir i]
onoremap ak a)
vnoremap ak a)
onoremap ik i)
vnoremap ik i)
vnoremap ( t(
vnoremap ) t)
vnoremap ] t]
vnoremap [ t[
vnoremap "" t"
vnoremap ' t'
onoremap ( t(
onoremap ) t)
onoremap ] t]
onoremap [ t[
onoremap "" t"
onoremap ' t'


cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-d> <Delete>
cnoremap <C-x> <C-r>=substitute(expand('%:p:h'), ' ', '\\v:val', 'e')<CR>/

cnoremap <C-]>a <Home>
cnoremap <C-]>e <End>
"cnoremap <C-]>f <C-f>
cnoremap <C-]>f <S-Right>
cnoremap <C-]>b <S-Left>
cnoremap <C-]>d <Delete>
cnoremap <C-]>i <C-d>
cnoremap <C-]><C-a> <Home>
cnoremap <C-]><C-e> <End>
cnoremap <C-]><C-f> <S-Right>
cnoremap <C-]><C-b> <S-Left>
cnoremap <C-]><C-d> <Delete>
cnoremap <C-]><C-i> <C-d>

" }}}
" commands {{{1
function! SudoRead(url) "{{{2
  if a:url ==# '<afile>'
    let file=expand(a:url)
  else
    let file=a:url
  endif
  let prot=matchstr(file,'^\(sudo\)\ze:')
  if '' !=# prot
    let file=strpart(file,strlen(prot)+1)
  endif
  0,$d
  call setline(1,'foo')
  execute '1read !sudo cat "'.file.'" '
  1d
  setlocal nomodified
  filetype detect
endfunction

function! SudoWrite(url) abort "{{{2
  let file = a:url ==# '<afile>' ? expand(a:url) : a:url
  let prot=matchstr(file,'^\(sudo\)\ze:')
  if '' !=# prot
    let file=strpart(file,strlen(prot)+1)
  endif
  set nomodified
  execute '%write !sudo tee >/dev/null "'.file.'"'
endf
" commands {{{2
command! -nargs=1 SudoRead call SudoRead(<f-args>)
command! -nargs=1 SudoWrite call SudoWrite(<f-args>)
command! SW w sudo:%
command! SR read sudo:%
augroup Sudo
  autocmd!
  au BufReadCmd	sudo:*,sudo:*/* SudoRead <afile>
  au FileReadCmd	sudo:*,sudo:*/* SudoRead <afile>
  au BufWriteCmd	sudo:*,sudo:*/* SudoWrite <afile>
  au FileWriteCmd	sudo:*,sudo:*/* SudoWrite <afile>
augroup END

if s:is_win
  if exists(':tmap')
    command! PowerShell terminal ++close ++curwin powershell
    command! Bash terminal ++close ++curwin C:/Windows/System32/bash.exe -c "cd; bash -l"
  endif
endif
" }}}
" plugin {{{1
if v:version > 702
  " if has('vim_starting')
  "   filetype off
  "   silent call pathogen#infect()
  " endif

  " enable some plugin {{{3
  runtime macros/matchit.vim

  " mkdir -p ~/.vim/autoload ~/.vim/bundle; curl -Lso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim; mkdir -p ~/.vim/bundle ; cd ~/.vim/bundle;
  " git clone https://github.com/Shougo/vimfiler.git
  " git clone https://github.com/Shougo/unite.vim.git
  " curl -L https://github.com/Shougo/vimfiler/tarball/master | tar zxv
  " curl -L https://github.com/Shougo/unite.vim/tarball/master | tar zxv

  function! s:plugin_install() " {{{3
    let exec_git = executable('git')
    let repos = [
    \ 'https://github.com/Shougo/vimfiler',
    \ 'https://github.com/Shougo/unite.vim',
    \ 'https://github.com/kana/vim-operator-replace',
    \ 'https://github.com/kana/vim-operator-user',
    \ ]
    if input('install plugin? [y/n]:') !=# 'y'
      echo 'Canceled.'
      return
    endif
    call mkdir(exppand('~/.vim'))
    call mkdir(expand('~/.vim/autoload'))
    call mkdir(expand('~/.vim/bundle'))

    call system('curl -Lso ~/.vim/autoload/pathogen.vim https://raw.github.com/tpope/vim-pathogen/HEAD/autoload/pathogen.vim')
    let cwd = getcwd()
    execute 'lcd' expand('~/.vim/bundle')
    for repo in repos
      if exec_git
        call system(printf('git clone %s.git', repo))
      else
        call system(printf('curl -L %s/tarball/master | tar zxv', repo))
      endif
    endfor

    execute 'lcd' cwd
  endfunction
  command! -nargs=0 PluginInstall call s:plugin_install()
endif "}}}

" plugin and colors {{{1
filetype indent plugin on
if has('syntax')
  syntax enable
endif
if filereadable(expand('~/.vimrc.personal'))
  execute 'source' expand('~/.vimrc.personal')
endif

set background=dark

function! s:color_init()
  highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=22
  highlight DiffDelete cterm=bold ctermfg=10 ctermbg=52
  highlight DiffChange cterm=bold ctermfg=10 ctermbg=17
  highlight DiffText   cterm=bold ctermfg=10 ctermbg=21
endfunction
MyAutoCmd ColorScheme * call <SID>color_init()

if exists(':NeoBundle')
  if has('gui_running')
    MyAutoCmd GUIEnter * colorscheme vividchalk
  else
    colorscheme vividchalk
  endif
else
  if has('gui_running')
    MyAutoCmd GUIEnter * colorscheme desert256
  else
    colorscheme retrobox
  endif
endif

" some autocmd {{{1
if has('user_commands')
  MyAutoCmd FileType txt,rst,markdown,gitcommit setlocal spell
endif
if !s:is_win && has('user_commands')
  MyAutoCmd BufWritePost *
    \ if getline(1) =~# '^#!'
    \ | exe 'silent !chmod +x %'
    \ | endif
endif
function! s:auto_mkdir(dir, force) "{{{
  if !isdirectory(a:dir) && (a:force ||
        \ input(printf('"%s" does not exist. Create? [y/N]', a:dir)) =~? '^y\%[es]$')
    call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
  endif
endfunction "}}}
if has('user_commands')
  MyAutoCmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
endif
MyAutoCmd FileType gitcommit let &comments=":;" | let &commentstring="; %s"

" plugin settings {{{1
let g:vimrc_enabled_plugins = {}
" unified-diff {{{2
if s:has_plugin('vim-unified-diff') && has('gui_running')
  set diffexpr=unified_diff#diffexpr()

  " configure with the followings (default values are shown below)
  let unified_diff#executable = 'git'
  let unified_diff#arguments = [
    \   'diff', '--no-index', '--no-color', '--no-ext-diff', '--unified=0',
    \   '--diff-algorithm=histogram',
    \ ]
  let unified_diff#iwhite_arguments = [
    \   '--ignore--all-space',
    \ ]
endif

" vimfiler "{{{2
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
" let g:vimfiler_edit_command = 'new'

" unite.vim "{{{2
if s:has_plugin('unite.vim')
  let g:unite_data_directory = $VIM_CACHE . '/vim-unite'
  nnoremap [!unite] <Nop>
  nmap     f       [!unite]
  nnoremap [!unite]f f
  let g:unite_enable_start_insert=0
  let g:unite_source_file_mru_limit=200
  let g:unite_source_file_mru_time_format = ''
  let g:unite_winheight = 20
  let g:unite_source_file_ignore_pattern = '\%(^\|/\)\.$\|\~$\|\.\%(o|exe|dll|bak|sw[po]\)$\|/chalice_cache/\|/-Tmp-/'

  nnoremap <silent> [!unite]j       :<C-u>Unite buffer_tab<CR>
  nnoremap <silent> [!unite]l       :<C-u>Unite file<CR>
  nnoremap <silent> [!unite]m       :<C-u>Unite file_mru directory_mru<CR>
  nnoremap <silent> [!unite]k       :<C-u>Unite tab<CR>
  nnoremap <silent> [!unite]a       :<C-u>Unite file_rec -start-insert<CR>
  nnoremap <silent> [!unite]hk      :<C-u>Unite mapping<CR>
  nnoremap <silent> [!unite]gr      :<C-u>Unite grep -buffer-name=grep -no-quit<CR>
  nnoremap <silent> [!unite]gi      :<C-u>Unite git_grep -buffer-name=git_grep -no-quit<CR>
  nnoremap <silent> [!unite]ri      :<C-u>UniteResume git_grep -no-quit<CR>
  nnoremap <silent> [!unite]rg      :<C-u>UniteResume grep -no-quit<CR>
  nnoremap <silent> [!unite]u       :<C-u>Unite<Space>

  if executable('hw')
    set grepprg=hw
    set grepformat=%f:%l:%m
    let g:unite_source_grep_command = "hw"
    let g:unite_source_grep_default_opts = '-i --no-group --no-color'
    let g:unite_source_grep_recursive_opt = ''
  endif
endif

if s:has_plugin('vimshell') "{{{2
  let g:vimshell_temporary_directory = $VIM_CACHE . '/vimshell'
  let g:vimshell_enable_smart_case = 1
  let g:vimshell_enable_auto_slash = 1

  let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
endif

if s:has_plugin('vim-niceblock')
  xmap I <Plug>(niceblock-I)
  xmap A <Plug>(niceblock-A)
endif

if s:has_plugin('vim-fakeclip')
  nmap ,y <Plug>(fakeclip-screen-y)
  nmap ,p <Plug>(fakeclip-screen-p)
  vmap ,y <Plug>(fakeclip-screen-y)
  vmap ,p <Plug>(fakeclip-screen-p)
endif
if s:has_plugin('vim-operator-replace') "{{{2
  map _ <Plug>(operator-replace)
endif

if s:has_plugin('sudo.vim') || s:has_plugin('SudoEdit.vim') "{{{2
  command! SW w sudo:%
  command! SR read sudo:%
endif

if s:has_plugin('vim-commentary')
  xmap gc <Plug>Commentary
  nmap gc <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  nmap gcu <Plug>CommentaryUndo
endif

if s:has_plugin('vim-fugitive')
  if s:is_mac
    map <leader>1 :diffget //2 <Bar> duffupdate<CR>
    map <leader>2 :diffget //3 <Bar> duffupdate<CR>
    map <leader>3 :diffupdate <Bar>
      \ echo '<Leader>1 = merges from target branch(left buffer), '."\n"
      \ . '<Leader>2 = merges from merge branch(right buffer)'<CR>
  else
    map <leader>1 :diffget LOCAL <Bar> duffupdate<CR>
    map <leader>2 :diffget REMOTE <Bar> duffupdate<CR>
    map <leader>3 :diffupdate <Bar>
      \ echo '<Leader>1 = merges from target branch(left buffer), '."\n"
      \ . '<Leader>2 = merges from merge branch(right buffer)'<CR>
  endif

  nnoremap <silent> [!space]gd :<C-u>Gdiff --cached<CR>
  nnoremap <silent> [!space]gD :<C-u>Gdiff<CR>
  nnoremap <silent> [!space]gs :<C-u>Gstatus<CR>
  nnoremap [!space]gl :<C-u>silent Glog <Bar> Unite -no-quit quickfix<CR>
  nnoremap [!space]gL :<C-u>silent Glog -- <Bar> Unite -no-quit quickfix<CR>
  nnoremap [!space]gg :<C-u>call <SID>git_qfix('Ggrep -i "%s"')<CR>
  nnoremap [!space]ggr :<C-u>Unite -no-quit -start-insert vcs_grep<CR>
  nnoremap [!space]ggm :<C-u>call <SID>git_qfix('Glog --grep="%s"')<CR>
  nnoremap [!space]ggl :<C-u>call <SID>git_qfix('Glog -S="%s"')<CR>
  nnoremap [!space]gR :<C-u>Gremove<CR>
  nnoremap [!space]gm :<C-u>Gmove<Space>
  nnoremap [!space]ga :<C-u>Gwrite<CR>
  nnoremap [!space]gA :<C-u>Gwrite <cfile><CR>
  nnoremap <silent> [!space]gc :<C-u>Gcommit<CR>
  nnoremap <silent> [!space]gC :<C-u>Gcommit --amend<CR>
  nnoremap <silent> [!space]gb :<C-u>Gblame<CR>
  nnoremap <silent> [!space]gB :<C-u>Gbrowse<CR>
  nnoremap <silent> [!space]gp :<C-u>Git push
  nnoremap <silent> [!space]ge :<C-u>Gedit<Space>
  nnoremap <silent> [!space]gv :<C-u>Gitv<CR>
  nnoremap <silent> [!space]gV :<C-u>Gitv!<CR>
  command! Gdiffoff diffoff | q | Gedit
endif
" __END__ {{{1
" vim:fdm=marker sw=2 ts=2 ft=vim expandtab:
