# vim:
# =======================================================
# [[plugins]]
# repo = ''
# hook_add = '''
# '''

# TOML sample
# hook_add = 'let g:foo = 0'

[ftplugin] # Execute after ftplugin.
# _ = '''
#   setl formatoptions-=ro | setl formatoptions+=mMBl
# '''
# xxx = '''
# if d#is_installed('vim-smartchr')
# endif
# '''
# [[plugins]]
# repo = 'rhysd/accelerated-jk'
# on_map = '<Plug>'
# hook_add = '''
#   nnoremap <silent>j <Plug>(accelerated_jk_gj)
#   nnoremap <silent>k <Plug>(accelerated_jk_gk)
# '''
# [[plugins]]
# repo = 'seroqn/vim-hairline'
# hook_add = '''
# " https://qiita.com/seroqn/items/31cb24cea3f8a00f3ee7
# let g:hairline = {}
# let g:hairline.statusline.left = ["f:mode", "bufname", "H:filetype"]
# let g:hairline.statusline.left_NC = ["bufname", "filetype"]
# let g:hairline.statusline.right = [
# \ "f:qfcount",
# \ 'f:linestat', 'filetype',
# \ 'f:charcode', 'f:fileinfo',
# \ ]

# let g:hairline.part_func = {}
# function! g:hairline.part_func.mode() abort
#   let mode = get(
#   \ {'n': 'NORMAL', 'i': 'INSERT', 'v': 'VISUAL', 'V': 'V-LINE',
#   \ "\<C-v>": 'V-BLOCK', 't': 'TERMINAL'}, mode(), 'NORMAL')
#   return mode
# endfunction

# function! g:hairline.part_func.qfcount() abort
#     if d#is_installed('ale')
#       let counts = ale#statusline#Count(bufnr(''))

#       let errors = counts.error + counts.style_error
#       let warnings = counts.total - errors

#       return counts.total == 0 ? '' : printf('%dW %dE', warnings, errors)
#     endif
#     let qflist = getqflist()
#     let c = len(filter(qflist, 'v:val.lnum != 0'))
#     unlet qflist
#     if c <= 0
#       return ""
#     endif
#     return "qf:" . c
# endfunction

# function! g:hairline.part_func.linestat() abort
#   " １"
# endfunction
# function! g:hairline.part_func.charcode() abort
#   let ch = matchstr(getline('.'), '.', col('.')-1)
#   let code = strgetchar(ch, 0)
#   if code < 0 | return 'NUL' | endif
#   return printf('0x%0'.(code>256?4:2).'x[%d]', code, code)
# endfunction
# function! g:hairline.part_func.fileinfo() abort
#     let s = empty(&fileformat) ? '' : '['.&fileformat.']'
#     return &fileencoding . s
# endfunction

# " function! g:hairline#default.highlight() abort
# " endfunc
# '''
# =======================================================
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" colorscheme - http://cocopon.me/blog/?p=3522 " {{{3
function! s:build_ll_colorscheme()
  let mono0 = '#1d1f21'
  let mono1 = '#282a2e'
  let mono2 = '#303030'
  let mono3 = '#373b41'
  let mono4 = '#707880'
  let mono5 = '#c5c8c6'

  let red    = '#cc6666'
  let green  = '#b5bd68'
  let blue   = '#81a2be'
  let orange = '#de935f'

  let p = {
        \ 'normal':   {},
        \ 'inactive': {},
        \ 'insert':   {},
        \ 'replace':  {},
        \ 'visual':   {},
        \ 'tabline':  {}}
  let p.normal.middle = [
        \ {'bg': mono1, 'fg': mono4}]
  let p.normal.left = [
        \ {'bg': green, 'fg': mono0},
        \ {'bg': mono3, 'fg': mono5}]
  let p.normal.right = [
        \ {'fg': 'white', 'bg': 'red'},
        \ {'fg': 'gray5', 'bg': 'gray10'},
        \ {'fg': 'gray9', 'bg': 'gray4'},
        \ {'fg': 'gray8', 'bg': 'gray2'},
        \ ]
  " \ {'fg': 'white', 'bg': red},
  let p.inactive.middle = [
        \ {'bg': mono2, 'fg': mono4}]
  let p.inactive.right = [
        \ p.inactive.middle[0],
        \ p.inactive.middle[0]]
  let p.inactive.left = [
        \ p.inactive.middle[0],
        \ p.inactive.middle[0]]

  let p.insert.left = [
        \ {'bg': blue, 'fg': mono0},
        \ p.normal.left[1]]
  let p.replace.left = [
        \ {'bg': red, 'fg': mono0},
        \ p.normal.left[1]]
  let p.visual.left = [
        \ {'bg': orange, 'fg': mono0},
        \ p.normal.left[1]]
  let p.tabline.middle = [
        \ {'bg': mono4, 'fg': mono0}]
  let p.tabline.right = [
        \ {'bg': mono1, 'fg': mono4},
        \ {'bg': mono4, 'fg': mono0}]
  let p.tabline.left = [
        \ {'bg': mono1, 'fg': mono4}]
  let p.tabline.tabsel = [
        \ {'bg': mono0, 'fg': mono5}]
  let p = copy(p)

  for mode in values(p)
    for colors in values(mode)
      let colors = map(colors, '[v:val.fg, v:val.bg]')
  endfor
endfor

let g:lightline#colorscheme#vimrc#palette = lightline#colorscheme#fill(p)
  endfunction "}}}
  call s:build_ll_colorscheme()

  function! s:lightline_update() "{{{3
    if !exists('g:loaded_lightline')
      return
  endif
  try
    if g:colors_name =~# 'wombat\|solarized\|landscape\|jellybeans\|Tomorrow'
      let g:lightline.colorscheme =
            \ substitute(substitute(g:colors_name, '-', '_', 'g'), '256.*', '', '') .
            \ (g:colors_name ==# 'solarized' ? '_' . &background : '')
  endif
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
  catch
endtry
endfunction
MyAutoCmd ColorScheme * call <SNR>lightline_update()
'''

# =======================================================
# [[plugins]]
# repo = 'mattn/startmenu-vim'
# on_if = 'd#is_win()'

[[plugins]]
repo = 'majutsushi/tagbar'



# repo = 'Shougo/vimshell.vim'
# repo = "osyo-manga/unite-filters-collection"
# repo = 'osyo-manga/vim-precious'
# repo = 'pekepeke/vim-gitcomplete', 'develop'

# =======================================================
[[plugins]]
repo = 'Shougo/vinarise'
on_cmd = ['Vinarise', 'VinariseDump', 'VinariseScript2Hex']
[[plugins]]
repo = 'chikatoike/concealedyank.vim'
on_map = '<Plug>'
[[plugins]]
repo = 'pekepeke/quickfixstatus'
on_cmd = ['QuickfixStatusEnable', 'QuickfixStatusDisable']
[[plugins]]
repo = 'cohama/vim-hier'
on_cmd = ['HierUpdate', 'HierClear', 'HierStart', 'HierStop',]

# TODO : http://qiita.com/hokorobi/items/f1bd7b52b1049a652dc2
# repo = 'machakann/vim-sandwich'

# repo = 'tpope/vim-abolish', {'autoload': {
# on_cmd = ['Abolish', 'Subvert']
# on_map = '<Plug>'

# =======================================================
[[plugins]]
repo = 'tpope/vim-dispatch'
on_cmd = ['FocusDispatch', 'Dispatch', 'Start', 'Make', 'Copen']
# repo = 'rhysd/endwize.vim',  {'insert':1}

# =======================================================
# [[plugins]]
# repo = 't9md/vim-quickhl'
# on_cmd = [
# 	'QuickhlManualEnable', 'QuickhlManualDisable', 'QuickhlManualList',
# 	'QuickhlManualReset', 'QuickhlManualColors', 'QuickhlManualAdd',
# 	'QuickhlManualDelete', 'QuickhlManualLock', 'QuickhlManualUnlock',
# 	'QuickhlManualLockToggle', 'QuickhlManualLockWindow', 'QuickhlManualUnlockWindow',
# 	'QuickhlManualLockWindowToggle', 'QuickhlCwordEnable', 'QuickhlCwordDisable',
# 	'QuickhlCwordToggle', 'QuickhlTagEnable', 'QuickhlTagDisable',
# 	'QuickhlTagToggle',
# ]
# on_map = '<Plug>'
# hook_add = '''
#   let g:quickhl_manual_enable_at_startup = 1
#   let g:quickhl_cword_enable_at_startup = 1
#   let g:quickhl_tag_enable_at_startup = 1
#   nmap [!space]m <Plug>(quickhl-cword-toggle)
#   xmap [!space]m <Plug>(quickhl-cword-toggle)
#   nmap [!space]M <Plug>(quickhl-manual-reset)
#   xmap [!space]M <Plug>(quickhl-manual-reset)
#   nmap [!space], <Plug>(quickhl-manual-this)
# '''


# =======================================================
[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = [ 'Align', 'Alignta' ]
hook_add = '''
let g:alignta_confirm_for_retab = 0
" let g:Align_xstrlen=3
" vmap ,a :Align

vnoremap ,a :Alignta
vnoremap ,,a :Alignta<< [:=><\-)}\]]\+
vnoremap ,,r :Alignta<< [=><\-)}\]]\+
vnoremap ,,t :Alignta \|<CR>
vnoremap ,,c :Alignta<< \(//\|#\|\/\*\)/1<CR>
'''

# =======================================================
[[plugins]]
repo = 'syngan/vim-clurin'
hook_add = '''
nmap <C-a> <Plug>(clurin-next)
nmap <C-x> <Plug>(clurin-prev)
vmap <C-a> <Plug>(clurin-next)
vmap <C-x> <Plug>(clurin-prev)
nmap + <Plug>(clurin-next)
nmap - <Plug>(clurin-prev)
vmap + <Plug>(clurin-next)
vmap - <Plug>(clurin-prev)
function! VimrcCtrlAX(cnt) abort
  let fallback = a:cnt > 0 ? "\<C-a>" : "\<C-x>"
  if !d#is_installed('vim-speeddating')
    execute 'normal!' abs(a:cnt).fallback
    return
  endif
  let speeddating = "\<Plug>SpeedDating" . (a:cnt > 0 ? "Up" : "Down")

  let line = getline('.')
  execute 'normal' abs(a:cnt).speeddating
  if line == getline('.')
    execute 'normal!' abs(a:cnt).fallback
  endif
endfunction
let g:clurin = {
      \ '-': {
      \   'def': [
      \     ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'],
      \     [ 'january', 'february', 'march', 'april', 'may',
      \       'june', 'july', 'august', 'september', 'october',
      \       'november', 'december'],
      \     ['get', 'post', 'put', 'delete'],
      \     ['pick', 'squash', 'edit', 'reword', 'fixup', 'exec'],
      \     ['previous', 'current', 'next'],
      \     ['=', ':='],
      \     ['true', 'false'],
      \     ['月','火','水','木','金','土','日'],
      \     ['public', 'protected', 'private'],
      \     ['get', 'post', 'put', 'delete'],
      \   ],
      \   'nomatch': function('VimrcCtrlAX'),
      \ },
      \ 'php': {
      \   'def': [
      \     ['extends', 'implements'],
      \     ['assert', 'depends', 'dataProvider', 'expectedException', 'group', 'test'],
      \   ],
      \ },
      \ 'vim': {
      \   'def': [
      \     ['echo', 'echomsg'],
      \     ['if', 'elseif', 'endif'],
      \     ['for', 'endfor'],
      \     ['function', 'endfunction'],
      \     ['try', 'catch', 'finally'],
      \     ['nnoremap', 'xnoremap', 'inoremap', 'vnoremap', 'cnoremap', 'onoremap'],
      \     ['nmap', 'xmap', 'imap', 'vmap', 'cmap', 'omap'],
      \     ['NeoBundle', 'NeoBundleLazy'],
      \     ['Home', 'End', 'Left', 'Right', 'Delete'],
      \     ['has', 'has_key', 'exists'],
      \   ],
      \ },
      \ 'go': {
      \   'def': [
      \     ['true', 'false', 'iota', 'nil'],
      \     ['print', 'println'],
      \     ['byte', 'complex64', 'complex128'],
      \     ['int', 'int8', 'int16', 'int32', 'int64'],
      \     ['uint', 'uint8', 'uint16', 'uint32', 'uint64'],
      \     ['float32', 'float64'],
      \     ['interface', 'struct'],
      \   ],
      \ },
      \ 'ruby': {
      \   'def': [
      \     ["describe", "context", "specific", "example"],
      \     ['before', 'after'],
      \     ['be_true', 'be_false'],
      \     ['==', 'eql', 'equal'],
      \     [ '.should_not', '.should' ],
      \     ['.to_not', '.to'],
      \   ],
      \ },
      \ 'markdown': {
      \   'def': [
      \     ['[ ]', '[x]'],
      \     ['#', '##', '###', '####', '#####', ],
      \     ["-", "\t-", "\t\t-", "\t\t\t-", ],
      \     ["+", "\t+", "\t\t+", "\t\t\t+", ],
      \   ],
      \ },
      \ }
'''
# =======================================================
[[plugins]]
repo = 'tpope/vim-speeddating'
on_map = '<Plug>'
on_cmd = ['SpeedDatingFormat']
hook_add = '''
let g:speeddating_no_mappings = 1

if !d#is_installed('vim-clurin')
  nmap <C-A> <Plug>SpeedDatingUp
  nmap <C-X> <Plug>SpeedDatingDown
  xmap <C-A> <Plug>SpeedDatingUp
  xmap <C-X> <Plug>SpeedDatingDown
endif
nmap d<C-A> <Plug>SpeedDatingNowUTC
nmap d<C-X> <Plug>SpeedDatingNowLocal
'''

# =======================================================
[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = '<Plug>'
hook_add = '''
let g:clever_f_not_overwrites_standard_mappings=1

nmap [!duu]f <Plug>(clever-f-f)
vmap f <Plug>(clever-f-f)
map F <Plug>(clever-f-F)
" map t <Plug>(clever-f-t)
" map T <Plug>(clever-f-T)
'''
# =======================================================
[[plugins]]
repo = 'sgur/vim-editorconfig'
# if has('python')
#   repo = 'editorconfig/editorconfig-vim'
# endif

# =======================================================
[[plugins]]
repo = 'pekepeke/vim-trimr'
hook_add = '''
let g:trimr_method = 'ignore_filetype'
let g:trimr_targets = ['markdown', 'mkd', 'textile']
'''
# repo = 'othree/eregex.vim'
# on_cmd = ['E2v', 'M', 'S', 'G', 'V']
# hook_add = '''
# let g:eregex_default_enable=0
# '''
# =======================================================
[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
nnoremap <Leader>u :<C-u>UndotreeToggle<CR>

let g:undotree_SetFocusWhenToggle = 1
" let g:undotree_SplitLocation = 'topleft'
let g:undotree_WindowLayout = 'topleft'
let g:undotree_SplitWidth = 35
let g:undotree_diffAutoOpen = 1
let g:undotree_diffpanelHeight = 25
let g:undotree_RelativeTimestamp = 1
let g:undotree_TreeNodeShape = '*'
let g:undotree_HighlightChangedText = 1
let g:undotree_HighlightSyntax = "UnderLined"
'''
# repo = 'sjl/gundo.vim'
# =======================================================
[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PP', 'PrettyPrint']
# =======================================================
[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = ['RengBang']
on_map = '<Plug>'
hook_add = '''
let g:rengbang_default_pattern  = '\(\d\+\)'
let g:rengbang_default_start    = 1
let g:rengbang_default_step     = 1
let g:rengbang_default_usefirst = 0
let g:rengbang_default_confirm_sequence = [
      \ 'pattern',
      \ 'start',
      \ 'step',
      \ 'usefirst',
      \ 'format',
      \ ]
'''
# =======================================================
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_indent_levels = 10
if has('gui_running')
  let g:indent_guides_auto_colors = 1
else
  let g:indent_guides_auto_colors = 0
  augroup vimrc-plugin-indentguides
    autocmd!
    autocmd VimEnter,Colorscheme * :highlight IndentGuidesEven ctermbg=236 ctermfg=white
    autocmd VimEnter,Colorscheme * :highlight IndentGuidesOdd ctermbg=235 ctermfg=white
  augroup END
endif
'''

# =======================================================
[[plugins]]
repo = 'vim-scripts/sudo.vim'
hook_add = '''
if d#is_mac() && has('gui_running') && d#is_installed('sudo-gui.vim')
  command! -bang SW SudoWriteMacGUI
else
  command! SW w sudo:%
  command! SR read sudo:%
endif
'''
# [[plugins]]
# repo = 'mattn/startmenu-vim'
# [[plugins]]
# repo = 'rhysd/unite-mac-apps'
[[plugins]]
repo = 'koron/codic-vim'
hook_add = '''
" http://sgur.tumblr.com/post/91906146884/codic-vim
inoremap <silent> <C-x><C-t> <C-R>=<SID>codic_complete()<CR>
function! s:codic_complete()
  let line = getline('.')
  let start = match(line, '\k\+$')
  let cand = s:codic_candidates(line[start :])
  call complete(start +1, cand)
  return ''
endfunction

function! s:codic_candidates(arglead)
  let cand = codic#search(a:arglead, 30)
  " error
  if type(cand) == type(0)
    return []
  endif
  " english -> english terms
  if a:arglead =~# '^\w\+$'
    return map(cand, '{"word": v:val["label"], "menu": join(map(copy(v:val["values"]), "v:val.word"), ",")}')
  endif
  " japanese -> english terms
  return s:reverse_candidates(cand)
endfunction

function! s:reverse_candidates(cand)
  let _ = []
  for c in a:cand
    for v in c.values
      call add(_, {"word": v.word, "menu": !empty(v.desc) ? v.desc : c.label })
    endfor
  endfor
  return _
endfunction
'''

# lang {{{3
# basic {{{4
# =======================================================
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <expr><silent><C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  nnoremap <Leader>r <Plug>(quickrun)
  nnoremap <Leader>qr <Plug>(quickrun)
  "silent! nmap <unique> <Space> <Plug>(quickrun)
  if !exists('g:quickrun_config')
    let g:quickrun_config={}
  endif

  " objc {{{4
  call extend(g:quickrun_config, {
    \ 'objc/gcc' : {
    \   'command' : 'gcc',
    \   'exec' : ['%c %o %s -o %s:p:r -framework Foundation', '%s:p:r %a', 'rm -f %s:p:r'],
    \   'tempfile': '{tempname()}.m'
    \ },
    \ })
  if d#is_mac()
    call extend(g:quickrun_config, {
    \ 'objc' : {
    \   'type' : 'objc/xctool',
    \ },
    \ 'objc/xctool' : {
    \    'command': 'xctool',
    \    'cmdopt': 'test',
    \    'outputter': 'xctool',
    \    'exec': ['%c %o %a'],
    \ },
    \ 'swift' : {
    \   'type' : 'swift/xcrun',
    \ },
    \ 'swift/xcrun' : {
    \    'command': 'xcrun swift',
    \    'cmdopt': '-i',
    \    'outputter': 'xctool',
    \    'exec': ['%c %s %o %a'],
    \ },
    \ })
  else
    call extend(g:quickrun_config, {
    \ 'objc' : {
    \   'type' : 'objc/gcc',
    \ },
    \ })
  endif
  " gcc {{{4
  call extend(g:quickrun_config, {
  \ 'cpp': {
  \   'type' : 'cpp/clang++',
  \ },
  \ 'cpp/gcc': {
  \   'command' : 'g++',
  \   'cmdopt' : '-std=c++11 -Wall -Wextra',
  \   'hook/quickrunex/enable' : 1,
  \ },
  \ 'cpp/clang++': {
  \   'command' : 'clang++',
  \   'cmdopt' : '-std=c++1y -Wall -Wextra',
  \   'hook/quickrunex/enable' : 1,
  \ },
  \ })
  " go {{{4
  call extend(g:quickrun_config, {
  \ 'go' : {
  \   'type' : executable('go') && executable('8g') ? 'go/8g': '',
  \ },
  \ 'go/8g' : {
  \   'command': '8g',
  \   'exec': ['8g %s', '8l -o %s:p:r %s:p:r.8', '%s:p:r %a', 'rm -f %s:p:r'],
  \ },
  \ })
  " csharp {{{4
  call extend(g:quickrun_config, {
  \ 'cs' : {
  \   'type' : executable('csc') ? 'cs/csc':
  \            executable('cs') ? 'cs/cs': '',
  \ },
  \ 'cs/csc' : {
  \   'command' : 'csc',
  \   'runmode' : 'simple',
  \   'exec' : ['%c /nologo %s:gs?/?\\? > /dev/null', '"%S:p:r:gs?/?\\?.exe" %a', ':call delete("%S:p:r.exe")'],
  \   'tempfile' : '{tempname()}.cs',
  \ },
  \ 'cs/cs' : {
  \   'command' : 'cs',
  \   'runmode' : 'simple',
  \   'exec' : ['%c %s > /dev/null', 'mono "%S:p:r:gs?/?\\?.exe" %a', ':call delete("%S:p:r.exe")'],
  \   'tempfile' : '{tempname()}.cs',
  \ },
  \ })
  if d#is_win() && executable('C:\Program Files (x86)\LINQPad4\LPRun.exe')
    let g:quickrun_config['cs/lprun'] = {
      \   'command': 'C:\Program Files (x86)\LINQPad4\LPRun.exe',
      \ , 'cmdopt': '-lang=S',
      \ , 'exec': '%c:gs?/?\\? %o %s',
      \ , 'tempfile': '%{tempname()}.cs',
      \ , 'hook/output_encode/encoding': '&termencoding',
      \ , 'hook/sweep/files': ['%S:p:r.exe'],
      \ }
  endif
  " html {{{4
  call extend(g:quickrun_config, {
  \ 'html' : {
  \   "type" : "html/haml"
  \ },
  \ 'html/haml' : {
  \   "command" : "html2haml"
  \ },
  \ 'html/haml_repace' : {
  \   "outputter" : "error",
  \   "outputter/success" : "replace_region",
  \   "outputter/error"   : "message",
  \   "outputter/message/log"   : 1,
  \   "runner" : "system",
  \   "type" : "html/haml"
  \ },
  \})
  " javascript {{{4
  call extend(g:quickrun_config, {
  \ 'json': {
  \   'type': 'json/jq',
  \ },
  \ 'coffee/coffee2javascript' : {
  \    'command': 'coffee',
  \    'cmdopt': '-pb',
  \    'outputter/buffer/filetype': 'javascript',
  \ },
  \ 'json/jq': {
  \   'command': 'jq',
  \ },
  \ })

  call extend(g:quickrun_config, {
  \ 'javascript/babel': {
  \   'cmdopt': '',
  \   'exec': "babel %o %s",
  \   'outputter/buffer/filetype': 'javascript',
  \ }})

  " call extend(g:quickrun_config, {
  " \ 'jsx' : {
  " \   'type' : 'denajsx/jsx',
  " \ },
  " \ 'denajsx/jsx' : {
  " \   'command': 'jsx',
  " \   'exec' : '%c %o --run %s',
  " \ },
  " \ })

  " css {{{4
  call extend(g:quickrun_config, {
  \ 'slim' : {
  \   'type' : 'slim/slimrb',
  \ },
  \ 'slim/slimrb' : {
  \   'command' : 'slimrb',
  \   'exec' : ['%c %o -p %s'],
  \ },
  \ })
  " rspec {{{4
  " http://qiita.com/joker1007/items/9dc7f2a92cfb245ad502
  call extend(g:quickrun_config, {
  \ 'ruby.rspec' : {
  \   'type' : 'ruby/rspec',
  \ },
  \ 'ruby/rspec' : {
  \   'command' : 'rspec',
  \   'exec' : '%c %o -l {line(".")}',
  \ },
  \ 'ruby.rspec/rspec_bundle': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'bundle exec %c %o --color --tty %s'
  \ },
  \ 'ruby.rspec/rspec_normal': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': '%c %o --color --tty %s'
  \ },
  \ 'ruby.rspec/rspec_zeus': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'zeus test %o --color --tty %s'
  \ },
  \ 'ruby.rspec/rspec_spring': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'spring rspec %o --color --tty %s'
  \ },
  \ 'ruby/cucumber_bundle': {
  \   'command': 'cucumber',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'bundle exec %c %o --color %s'
  \ },
  \ 'ruby/cucumber_zeus': {
  \   'command': 'cucumber',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'zeus cucumber %o --color %s'
  \ },
  \ 'ruby/cucumber_spring': {
  \   'command': 'cucumber',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'spring cucumber %o --color %s'
  \ },
  \ })

  " tests {{{4
  call extend(g:quickrun_config, {
  \ 'python.nosetests' : {
  \   'type' : 'python/nosetests',
  \ },
  \ 'perl.prove' : {
  \   'type' : 'perl/prove',
  \ },
  \ 'php.phpunit' : {
  \   'type' : 'php/phpunit',
  \ },
  \ 'python/nosetests' : {
  \   'command' : 'nosetests',
  \   'cmdopt': '-s -vv',
  \ },
  \ 'php/phpunit' : {
  \   'command' : 'phpunit',
  \ },
  \ 'perl/prove' : {
  \   'command' : 'prove',
  \ },
  \ })

  function! s:build_options(vars, ...) "{{{5
    let opts = []
    for [field, fmt] in items(a:vars)
      let value = get(b:, field, get(g:, field, ''))
      if !empty(value)
        call add(opts, printf(fmt, value))
      endif
    endfor

    return join(opts, " ")
  endfunction "}}}

  function! s:str_prepend(val, ch)
    return empty(a:val) ? "" : a:ch . a:val
  endfunction

  function! s:build_sqlplus_options() "{{{5
    let opts = []
    let vars = [
      \ 'dbext_user',
      \ 'dbext_passwd',
      \ 'dbext_host',
      \ 'dbext_port',
      \ 'dbext_dbname',
      \ ]
    let [user, pass, host, port, db] = map(vars, 'get(b:, field, get(g:, field, ""))')
    return printf("%s%s@%s%s%s", user,
      \ s:str_prepend(pass, "/"),
      \ host,
      \ s:str_prepend(port, ":"),
      \ s:str_prepend(db, "/")
      \ )
  endfunction " }}}
  function! MySQLCommandOptions() "{{{5
    if exists('b:MYSQL_cmd_options')
      return b:MYSQL_cmd_options
    endif
    return s:build_options({
          \ 'dbext_host': '-h %s',
          \ 'dbext_user': '-u %s',
          \ 'dbext_passwd': '-p%s',
          \ 'dbext_port': '-P %s',
          \ 'dbext_dbname': '%s',
          \ })
  endfunction "}}}
  function! PgSQLCommandOptions() "{{{5
    if exists('b:PGSQL_cmd_options')
      return b:PGSQL_cmd_options
    endif
    return s:build_options({
      \ 'dbext_host': '-h %s',
      \ 'dbext_user': '-u %s',
      \ 'dbext_port': '-p %s',
      \ 'dbext_dbname': '-d %s',
      \ })
  endfunction "}}}
  function! OracleCommandOptions() "{{{5
    if exists('b:SQLPLUS_cmd_options')
      return b:PGSQL_cmd_options
    endif

    return s:build_sqlplus_options()
  endfunction

  " configs{{{4
  call extend(g:quickrun_config, {
  \ 'mysql' : {
  \   'type' : 'sql/mysql',
  \ },
  \ 'sql' : {
  \   'type' : 'sql/postgresql',
  \ },
  \ 'sql/mysql' : {
  \   'command' : 'mysql',
  \   'cmdopt': '%{MySQLCommandOptions()}',
  \   'exec' : ['%c %o < %s'],
  \ },
  \ 'sql/postgresql': {
  \   'command' : 'psql',
  \   'cmdopt': '%{PgSQLCommandOptions()}',
  \   'exec': ['%c %o -f %s'],
  \ }
  \ })
  " texts {{{4
  call extend(g:quickrun_config, {
  \ 'text/glance' : {
  \   'runner' : 'vimscript',
  \   'exec' : 'Glance',
  \   'outputter' : 'null',
  \ }})
  call extend(g:quickrun_config, {
  \ 'text/previm' : {
  \   'runner' : 'vimscript',
  \   'exec' : 'silent PrevimOpen %o',
  \   'outputter' : 'null',
  \ }})
  if d#is_installed('glance')
    call extend(g:quickrun_config, {
    \ 'markdown': { 'type': 'text/glance' },
    \ })
  elseif d#is_installed('previm')
    call extend(g:quickrun_config, {
    \ 'markdown': { 'type': 'text/previm' },
    \ 'rst': { 'type': 'text/previm' },
    \ 'textile': { 'type': 'text/previm' },
    \ })
  else
    call extend(g:quickrun_config, { 'rst': { 'type': 'rst/rst2html', }})
    call extend(g:quickrun_config, {
    \ 'markdown' : {
    \   'type' :
    \      d#is_mac() && isdirectory('/Applications/Marked.app') ? 'markdown/Marked':
    \      executable('markedwrapper')    ? 'markdown/markedwrapper':
    \      executable('mdown')            ? 'markdown/mdown':
    \      executable('pandoc')           ? 'markdown/pandoc':
    \      executable('multimarkdown')    ? 'markdown/multimarkdown':
    \      executable('MultiMarkdown.pl') ? 'markdown/MultiMarkdown.pl':
    \      executable('rdiscount')        ? 'markdown/rdiscount':
    \      executable('bluecloth')        ? 'markdown/bluecloth':
    \      executable('markdown')         ? 'markdown/markdown':
    \      executable('Markdown.pl')      ? 'markdown/Markdown.pl':
    \      executable('redcarpet')        ? 'markdown/redcarpet':
    \      executable('kramdown')         ? 'markdown/kramdown':
    \      '',
    \   'outputter' : 'browser',
    \ },
    \ })
  endif

  call extend(g:quickrun_config, {
  \ 'markdown/markedwrapper' : {
  \   'command' : 'markedwrapper',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/mdown' : {
  \   'command' : 'mdown',
  \   'exec' : '%c %o -i %s',
  \ },
  \ 'markdown/Marked' : {
  \   'command' : 'open',
  \   'outputter' : 'null',
  \   'exec' : '%c -a Marked %o %s',
  \ },
  \ 'markdown/multimarkdown' : {
  \   'command' : 'multimarkdown',
  \ },
  \ 'markdown/rdiscount' : {
  \   'command' : 'rdiscount',
  \ },
  \ 'markdown/markdown' : {
  \   'command' : 'markdown',
  \ },
  \ })

  " script langs {{{4
  call extend(g:quickrun_config, {
  \ 'processing' : {
  \   'type' : executable('processing-java') ? 'processing/processing-java' :
  \            executable('osascript') ? 'processing/osascript':
  \            '',
  \ },
  \ 'applescript' : {
  \   'type' : executable('osascript') ? 'applescript/osascript':
  \            '',
  \ },
  \ 'diag' : {
  \   'type' : 'diag/diag',
  \ },
  \ })
  call extend(g:quickrun_config, {
  \ 'processing/osascript' : {
  \   'command': 'osascript',
  \   'exec' : ['osascript %o ' . globpath(&runtimepath, 'bin/runPSketch.scpt'). ' %s:p:h:t']
  \ },
  \ 'processing/processing-java' : {
  \   'command': 'processing-java',
  \   'exec' : '%c %o --sketch=$PWD/ --output=/Library/Processing --run --force',
  \ },
  \ 'applescript/osascript' : {
  \   'command' : 'osascript',
  \   'output' : '_',
  \ },
  \ 'diag/diag' : {
  \   'exec': [
  \      '%c -a %s -o %{expand("%:r")}.png',
  \      printf("%s %{expand(%:r)}.png %s",
  \        d#is_win() ? 'explorer' : (d#is_mac() ? 'open -g' : 'xdg-open'),
  \        d#is_win() ? "" : "&"),
  \   ],
  \   'outputter': 'message',
  \ },
  \ })
  call extend(g:quickrun_config, {
  \ 'command/cat' : {
  \   'command' : 'cat',
  \   'exec' : ['%c %o %s'],
  \ },
  \ })

  " TODO : not work
  call extend(g:quickrun_config, {
  \ 'w3m' : {
  \   'type' : 'w3m/open',
  \ },
  \ 'w3m/open': {
  \   'command': (d#is_win() ? 'start ""' : (d#is_mac() ? "open" : "xdg-open")),
  \   'exec': [
  \     '%c %o "%{b:last_url}"',
  \   ],
  \ }
  \ })

  nnoremap <Leader><Leader>r :<C-u>QuickRun command/cat<CR>
  function! s:vimrc_quickrun_init() "{{{4
    nmap <buffer> q :quit<CR>
  endfunction "}}}
  MyAutoCmd FileType quickrun call s:vimrc_quickrun_init()
'''

# =======================================================
[[plugins]]
repo = 'mattn/quickrunex-vim'
[[plugins]]
repo = 'mattn/emoji-vim'
on_cmd = ['Emoji']
on_map = '<Plug>'

# [[plugins]]
# repo = 'tokorom/vim-quickrun-xctool'
# =======================================================
[[plugins]]
repo = 'manicmaniac/vim-quickrun-qo'
# [[plugins]]
# repo = 'hrsh7th/vim-searchx'
# hook_add = '''
# " Overwrite / and ?.
# nnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
# nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
# xnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
# xnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
# cnoremap ; <Cmd>call searchx#select()<CR>

# " Move to next/prev match.
# nnoremap N <Cmd>call searchx#prev_dir()<CR>
# nnoremap n <Cmd>call searchx#next_dir()<CR>
# xnoremap N <Cmd>call searchx#prev_dir()<CR>
# xnoremap n <Cmd>call searchx#next_dir()<CR>
# nnoremap <C-k> <Cmd>call searchx#prev()<CR>
# nnoremap <C-j> <Cmd>call searchx#next()<CR>
# xnoremap <C-k> <Cmd>call searchx#prev()<CR>
# xnoremap <C-j> <Cmd>call searchx#next()<CR>
# cnoremap <C-k> <Cmd>call searchx#prev()<CR>
# cnoremap <C-j> <Cmd>call searchx#next()<CR>

# " Clear highlights
# nnoremap <C-l> <Cmd>call searchx#clear()<CR>

# let g:searchx = {}

# " Auto jump if the recent input matches to any marker.
# let g:searchx.auto_accept = v:true

# " The scrolloff value for moving to next/prev.
# let g:searchx.scrolloff = &scrolloff

# " To enable scrolling animation.
# let g:searchx.scrolltime = 500

# " To enable auto nohlsearch after cursor is moved
# let g:searchx.nohlsearch = {}
# let g:searchx.nohlsearch.jump = v:true

# " Marker characters.
# let g:searchx.markers = split('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '.\zs')

# " Convert search pattern.
# function g:searchx.convert(input) abort
#   if a:input !~# '\k'
#     return '\V' .. a:input
#   endif
#   return a:input[0] .. substitute(a:input[1:], '\\\@<! ', '.\\{-}', 'g')
# endfunction
# '''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>'
hook_add = '''
  let g:anzu_status_format = "%p(%i/%l)"
  let g:anzu_bottomtop_word = "search hit BOTTOM, continuing at TOP"
  let g:anzu_topbottom_word = "search hit TOP, continuing at BOTTOM"
  " nmap n <Plug>(anzu-n)zx
  " nmap n <Plug>(anzu-n)zo:<C-u>silent AnzuUpdateSearchStatus\|redraw!<CR>
  function! ExecIfFoldClosed(key)
    if foldclosed('.') != -1
      execute "normal!" a:key
    endif
  endfunction
  nnoremap <Plug>(vimrc-eifc-zO) :call ExecIfFoldClosed("zO")<CR>
  nmap <silent> n <Plug>(anzu-n)<Plug>(vimrc-eifc-zO)
  " nmap n <Plug>(anzu-jump-n)zx<Plug>(anzu-echo-search-status)
  nmap <silent> N <Plug>(anzu-N)<Plug>(vimrc-eifc-zO)
  nmap <silent> * <Plug>(anzu-star)N<Plug>(vimrc-eifc-zO)
  nmap <silent> # <Plug>(anzu-sharp)n<Plug>(vimrc-eifc-zO)

  " 一定時間キー入力がないとき、ウインドウを移動したとき、タブを移動したときに
  " 検索ヒット数の表示を消去する
  MyAutoCmd CursorMoved,CursorMovedI,WinLeave,TabLeave * if exists('*anzu#clear_search_status') | call anzu#clear_search_status() | endif
'''
# repo = 'kien/rainbow_parentheses.vim'
# hook_add = '''
#     MyAutoCmd VimEnter * RainbowParenthesesToggleAll
# '''
# repo = 'oblitum/rainbow'
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
  let g:rainbow_conf = {
  \  'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
  \  'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
  \  'operators': '_,_',
  \  'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
  \  'separately': {
  \    '*': {},
  \    'tex': {
  \      'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
  \    },
  \    'lisp': {
  \      'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
  \    },
  \    'vim': {
  \      'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
  \    },
  \    'html': {
  \      'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
  \    },
  \    'css': 0,
  \  }}
'''
[[plugins]]
repo = 'vim-scripts/matchit.zip'
# \ ,  { 'on_map' : [['nx', '%']], }
[[plugins]]
repo = 'gregsexton/MatchTag'
[[plugins]]
repo = 'tpope/vim-unimpaired'
# [[plugins]]
# repo = 'vim-scripts/ShowMultiBase'
# on_cmd = ['ShowMultiBase']
# hook_add = '''
#   let g:ShowMultiBase_General_UseDefaultMappings = 0

#   noremap <silent> <Leader>= :ShowMultiBase<CR>
#   noremap <silent> <Leader>b= :ShowMultiBase 2<CR>
#   noremap <silent> <Leader>o= :ShowMultiBase 8<CR>
#   noremap <silent> <Leader>d= :ShowMultiBase 10<CR>
#   noremap <silent> <Leader>h= :ShowMultiBase 16<CR>
# '''
[[plugins]]
repo = 'tommcdo/vim-exchange'
# repo = 'tyru/current-func-info.vim'
[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  let g:tagbar_type_objc = {
    \ 'ctagstype' : 'objc',
    \ 'kinds'     : [
    \   'P:protocols',
    \   'i:interfaces',
    \   'I:implementations',
    \   'M:instance methods',
    \   'C:implementation methods',
    \   'Z:protocol methods',
    \   'v:property',
    \ ]}
  let g:tagbar_type_ruby = {'ctagstype': 'Ruby', 'kinds':
    \   ['c:classes', 'f:methods', 'm:modules', 'F:singleton methods', 'r:regex']
    \ }
  let g:tagbar_type_javascript = {
    \ 'ctagstype' : 'js',
    \ 'kinds'     : [
    \   'o:object',
    \   'f:function',
    \   'a:array',
    \   's:string',
    \   'v:variable',
    \   'b:boolean',
    \   'n:number',
    \ ]}
  if executable('php') && executable('phpctags')
    let g:tagbar_type_php = {
      \ 'ctagsbin'  : 'phpctags',
      \ 'ctagsargs' : '--memory="128M" -f -',
      \ 'kinds'     : [
      \   'd:Constants:0:0',
      \   'v:Variables:0:0',
      \   'f:Functions:1',
      \   'i:Interfaces:0',
      \   'c:Classes:0',
      \   'p:Properties:0:0',
      \   'm:Methods:1',
      \   'n:Namespaces:0',
      \   't:Traits:0',
      \ ],
      \ 'sro'        : '::',
      \ 'kind2scope' : {
      \   'c' : 'class',
      \   'm' : 'method',
      \   'f' : 'function',
      \   'i' : 'interface',
      \   'n' : 'namespace',
      \   't' : 'trait',
      \ },
      \ 'scope2kind' : {
      \   'class'     : 'c',
      \   'method'    : 'm',
      \   'function'  : 'f',
      \   'interface' : 'i',
      \   'namespace' : 'n',
      \   'trait'     : 't',
      \ }}
  endif
  " let g:tagbar_type_javascript = {'ctagstype': 'JavaScript',
  "       \   'kinds': ['f:functions', 'c:classes', 'm:methods', 'p:properties', 'v:global variables', 'I:inner'] }
  if executable('npm') && executable('coffeetags')
    let g:tagbar_type_coffee = {
      \ 'ctagsbin' : 'coffeetags',
      \ 'ctagsargs' : '',
      \ 'kinds' : [
      \   'f:functions',
      \   'o:object',
      \ ],
      \ 'sro' : ".",
      \ 'kind2scope' : {
      \   'f' : 'object',
      \   'o' : 'object',
      \ }}
  else
    let g:tagbar_type_coffee = {'ctagstype': 'coffee',
      \   'kinds': ['c:class', 'n:namespace', 'f:function', 'm:method', 'v:var', 'i:ivar'] }
  endif
  let g:tagbar_type_scala = {'ctagstype': 'scala',
    \   'kinds': ['c:classes', 'o:objects', 't:traits', 'r:cclasses',
    \   'a:aclasses', 'm:methods', 'V:values', 'v:variables',
    \   'T:types', 'i:includes', 'p:packages'] }
  let g:tagbar_type_actionscript = {'ctagstype': 'actionscript',
    \   'kinds': ['f:functions', 'p:properties', 'v:variables',
    \   'r:function, functions', 'c:classes'] }
  let g:tagbar_type_tex = {
    \ 'ctagstype' : 'latex',
    \   'kinds': ['c:chapters', 's:sections', 'u:subsections', 'b:subsubsections',
    \   'p:parts', 'P:paragraphs', 'G:subparagraphs'] }
  let g:tagbar_type_make = { 'ctagstype' : 'make',
    \   'kinds': ['m:macros', 't:targets'] }
  let g:tagbar_type_ant = {'ctagstype': 'Ant',
    \   'kinds': ['p:projects', 't:targets'] }
  let g:tagbar_type_typescript = {'ctagstype': 'typescript',
    \   'kinds': ['c:classes', 'n:modules', 'f:functions', 'v:variables', 'm:members',
    \   'i:interfaces', 'e:enums'] }
  let g:tagbar_type_haxe = {'ctagstype': 'haxe', 'kinds': [
    \ 'p:package', 'f:function', 'v:variable', 'p:package', 'c:class', 'i:interface', 't:typedef',
    \ ] }
  let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
    \   'p:package',
    \   'i:imports:1',
    \   'c:constants',
    \   'v:variables',
    \   't:types',
    \   'n:interfaces',
    \   'w:fields',
    \   'e:embedded',
    \   'm:methods',
    \   'r:constructor',
    \   'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
    \   't' : 'ctype',
    \   'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
    \   'ctype' : 't',
    \   'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent',
    \ }
  " let g:tagbar_type_xxx = {
  "       \ 'ctagstype' : '',
  "       \ 'kinds'     : [
  "       \   '',
  "       \ ]}

  if d#is_mac() && executable('/Applications/MacVim.app/Contents/MacOS/ctags')
    " let g:Tlist_Ctags_Cmd='/Applications/MacVim.app/Contents/MacOS/ctags'
    let g:tagbar_ctags_bin='/Applications/MacVim.app/Contents/MacOS/ctags'
  endif
  nnoremap <silent> ,tt :<C-u>TagbarToggle<CR>
  nnoremap <silent> ,to :<C-u>TagbarOpen<CR>1<C-w>h
'''
# repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'ujihisa/shadow.vim'
[[plugins]]
repo = 'mhinz/vim-hugefile'
[[plugins]]
repo = 'tpope/vim-git'
[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = [ "Git", "Gstatus", "Gcommit", "Gedit", "Gwrite", "Ggrep", "Glog", "Gdiff"]
hook_add = '''
function! s:git_qfix(...)
  let word = input("Pattern: ")
  if empty(word)
    echoerr "abort"
  endif
  execute 'silent' call('printf', copy(a:000) + [word])
  " TODO: "
  Unite -no-quit quickfix
endfunction
  " if &diff
  " //2 = target-branch, //3 = merge branch
  if d#is_mac()
    map <leader>1 :diffget //2 <Bar> duffupdate<CR>
    map <leader>2 :diffget //3 <Bar> duffupdate<CR>
    map <leader>3 :diffupdate <Bar>
      \ echo '<Leader>1 = merges from target branch(left buffer), '."\n"
      \ . '<Leader>2 = merges from merge branch(right buffer)'<CR>
  else
    map <leader>1 :diffget LOCAL <Bar> duffupdate<CR>
    map <leader>2 :diffget REMOTE <Bar> duffupdate<CR>
    map <leader>3 :diffupdate <Bar>
      \ echo '<Leader>1 = merges from target branch(left buffer), '."\n"
      \ . '<Leader>2 = merges from merge branch(right buffer)'<CR>
  endif
  " endif

  nnoremap <silent> [!space]gd :<C-u>Gdiff --cached<CR>
  nnoremap <silent> [!space]gD :<C-u>Gdiff<CR>
  nnoremap <silent> [!space]gs :<C-u>Gstatus<CR>
  nnoremap [!space]gl :<C-u>silent Glog <Bar> Unite -no-quit quickfix<CR>
  nnoremap [!space]gL :<C-u>silent Glog --<Bar> Unite -no-quit quickfix<CR>
  nnoremap [!space]gg :<C-u>call <SID>git_qfix('Ggrep -i "%s"')<CR>
  nnoremap [!space]ggg :<C-u>Unite -no-quit -start-insert vcs_grep<CR>
  nnoremap [!space]ggr :<C-u>Unite -no-quit -start-insert vcs_grep<CR>
  nnoremap [!space]ggm :<C-u>call <SID>git_qfix('Glog --grep="%s"')<CR>
  nnoremap [!space]ggl :<C-u>call <SID>git_qfix('Glog -S="%s"')<CR>
  nnoremap [!space]gR :<C-u>Gremove<CR>
  nnoremap [!space]gm :<C-u>Gmove<Space>
  nnoremap [!space]ga :<C-u>Gwrite<CR>
  nnoremap [!space]gA :<C-u>Gwrite <cfile><CR>
  nnoremap <silent> [!space]gc :<C-u>Gcommit<CR>
  nnoremap <silent> [!space]gC :<C-u>Gcommit --amend<CR>
  nnoremap <silent> [!space]gb :<C-u>Gblame<CR>
  nnoremap <silent> [!space]gB :<C-u>Gbrowse<CR>
  nnoremap <silent> [!space]gp :<C-u>Git push
  nnoremap <silent> [!space]ge :<C-u>Gedit<Space>
  if d#is_installed('agit.vim')
    nnoremap <silent> [!space]gv :<C-u>Agit<CR>
    nnoremap <silent> [!space]gV :<C-u>AgitFile<CR>
  elseif d#is_installed('gitv')
    nnoremap <silent> [!space]gv :<C-u>Gitv<CR>
    nnoremap <silent> [!space]gV :<C-u>Gitv!<CR>
  endif
  command! Gdiffoff diffoff | q | Gedit

function! s:vimrc_git_init()
  setlocal foldmethod=expr
  " setlocal foldexpr=getline(v:lnum)!~'^commit'
  setlocal foldexpr=GitLogViewerFoldExpr(v:lnum)
  setlocal foldtext=GitLogViewerFoldText()
endfunction
MyAutoCmd FileType git call s:vimrc_git_init()
function! s:vimrc_fugitive_bufread_init()
  if exists('b:fugitive_type')
    if b:fugitive_type == "commit"
      " if exists('b:fugitive_display_format') && !b:fugitive_display_format
      "   normal a
      " endif
      normal! G
      if line('.') == 3
        setlocal modifiable
        normal! o
        execute "r! git show --no-color " . fugitive#buffer().sha1()
        setlocal nomodified nomodifiable
      endif
      normal! gg
    endif
  endif
endfunction
" MyAutoCmd BufReadPost  fugitive://**//[0-9a-f][0-9a-f]* call s:vimrc_fugitive_bufread_init()
" MyAutoCmd User Fugitive call s:vimrc_fugitive_init()
'''
[[plugins]]
repo = 'rhysd/committia.vim'
[[plugins]]
repo = 'rhysd/conflict-marker.vim'
[[plugins]]
repo = 'idanarye/vim-merginal'
on_cmd = [ "Merginal", "MerginalToggle", "MerginalClose"]
[[plugins]]
repo = 'AndrewRadev/gapply.vim'
on_cmd = [ "Gapply"]

# repo = 'gregsexton/gitv'
# on_cmd = ['Gitv']
hook_add = '''
  let g:Gitv_OpenHorizontal = 1
  let g:Gitv_WipeAllOnClose = 1
  let g:Gitv_DoNotMapCtrlKey = 1

  MyAutoCmd FileType gitv call s:vimrc_gitv_init()
  MyAutoCmd FileType git setlocal foldlevel=99
  " MyAutoCmd FileReadCmd,BufReadCmd fugitive://** setlocal foldlevel=99
  function! s:vimrc_gitv_init()
    setlocal iskeyword+=/,-,.

    nnoremap <buffer> gx :<C-u>Gbrowse <C-r>=GitvGetCurrentHash()<CR><CR>
    if d#is_installed('unite.vim')
      nnoremap <buffer><nowait> [!space] :<C-u>Unite menu:ft_gitv<CR>
    endif
  endfunction

  function! GitvGetCurrentHash()
    return matchstr(getline('.'), '\[\zs.\{7\}\ze\]$')
  endfunction
'''
[[plugins]]
repo = 'cohama/agit.vim'
on_cmd = ['Agit', 'AgitGit', 'AgitFile']
hook_add = '''
  let g:agit_enable_auto_show_commit = 0
  let g:agit_enable_auto_refresh = 0
  MyAutoCmd FileType agit call s:vimrc_agit_init()
  function! s:vimrc_agit_init()
    if d#is_installed('unite.vim')
      nnoremap <buffer><nowait> [!space] :<C-u>Unite menu:ft_agit<CR>
    endif
  endfunction
'''
[[plugins]]
repo = 'rhysd/git-messenger.vim'
[[plugins]]
repo = 'vim-scripts/DirDiff.vim'
on_cmd = [
  'DirDiffOpen', 'DirDiffNext', 'DirDiffPrev',
  'DirDiffUpdate', 'DirDiffQuit',
  'DirDiff'
]
hook_add = '''
  let g:DirDiffExcludes = "CVS,*.class,*.o,*.exe,.*.swp,*.log,.git,.svn,.hg"
  let g:DirDiffIgnore = "Id:,Revision:,Date:"
  map ;dg <Plug>DirDiffGet
  map ;dp <Plug>DirDiffPut
  map ;dj <Plug>DirDiffNext
  map ;dk <Plug>DirDiffPrev
'''
[[plugins]]
repo = 'vim-scripts/diffchar.vim'
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffReset']
# repo = 'vim-scripts/ConflictDetection'
# \ 'depends': 'vim-scripts/ingo-library'
# \ }

# help {{{4
[[plugins]]
repo = 'rhysd/devdocs.vim'
hook_add = '''
  " let g:devdocs_host = 'localhost:9292'
  let g:devdocs_filetype_map = {
    \   'typescript': 'javascript',
    \   'javascript.jsx': 'react',
    \ }
  command! -nargs=* DevDocsDocker call devdocs#open_doc(<q-args>, 'docker')
  command! -nargs=* DevDocsRuby call devdocs#open_doc(<q-args>, 'ruby')
  command! -nargs=* DevDocsRails call devdocs#open_doc(<q-args>, 'rails')
  command! -nargs=* DevDocsBootstrap call devdocs#open_doc(<q-args>, 'bootstrap')
  command! -nargs=* DevDocsReact call devdocs#open_doc(<q-args>, 'react')
  command! -nargs=* DevDocsLaravel call devdocs#open_doc(<q-args>, 'laravel')
'''
[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = ['Ref']
# on_map = ['K', '<Plug>']
on_map = '<Plug>'
hook_add = '''

  let g:ref_open = '8split'
  let g:ref_cache_dir = $VIM_CACHE . '/vim-ref'
  if !exists('g:ref_detect_filetype')
    let g:ref_detect_filetype = {}
  endif
  let g:ref_detect_filetype._ = 'webdict'
  let g:ref_use_vimproc = 0
  let g:ref_alc_use_cache = 1
  let g:ref_alc_start_linenumber = 43

  " if vimproc
  "   let g:ref_use_vimproc = 1
  " endif

  " options {{{3
  " webdict {{{4
  if d#is_win()
    " for w3m
    let $LANG='C.UTF-8'
    let g:ref_source_webdict_encoding = 'utf-8'
  endif
  let g:ref_source_webdict_sites = {
    \ 'alc' : {
    \   'url': 'http://eow.alc.co.jp/%s',
    \   'keyword_encoding,': 'utf-8',
    \   'cache': 1,
    \ },
    \ 'weblio': {
    \   'url': 'http://ejje.weblio.jp/content/%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': 1,
    \ },
    \ 'wikipedia': {
    \   'url': 'http://ja.wikipedia.org/wiki/%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'wikipedia:en': {
    \   'url': 'http://en.wikipedia.org/wiki/%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'wiktionary': {
    \   'url': 'http://ja.wiktionary.org/wiki/%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'ja_en': {
    \   'url': 'http://translate.google.co.jp/m?hl=ja\&sl=ja\&tl=en\&ie=UTF-8\&prev=_m\&q=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'en_ja': {
    \   'url': 'http://translate.google.co.jp/m?hl=ja\&sl=en\&tl=ja\&ie=UTF-8\&prev=_m\&q=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'ruby_toolbox': {
    \   'url': 'https://www.ruby-toolbox.com/search?utf8=%%E2%%9C%%93\&q=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'rurema': {
    \   'url': 'http://doc.ruby-lang.org/ja/search/query:%s/',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'rubygems': {
    \   'url': 'http://rubygems.org/search?query=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'node_toolbox': {
    \   'url': 'http://nodetoolbox.com/search?q=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'chef_cookbooks': {
    \   'url': 'http://community.opscode.com/search?query=%s\&scope=cookbook',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ 'underscore.js': {
    \   'url': 'http://underscorejs.org/?q=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '1',
    \ },
    \ 'lodash.js': {
    \   'url': 'http://lodash.com/docs?q=%s',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '1',
    \ },
    \ 'cpan': {
    \   'url': 'http://search.cpan.org/search?q=%s;s={startIndex}',
    \   'keyword_encoding': 'utf-8',
    \   'cache': '0',
    \ },
    \ }
  function! g:ref_source_webdict_sites.alc.filter(output)
    return join(split(a:output, "\n")[38:], "\n")
  endfunction
  function! g:ref_source_webdict_sites.weblio.filter(output)
    return join(split(a:output, "\n")[53 :], "\n")
  endfunction
  function! g:ref_source_webdict_sites.wikipedia.filter(output)
    return join(split(a:output, "\n")[17 :], "\n")
  endfunction
  function! g:ref_source_webdict_sites.wiktionary.filter(output)
    return join(split(a:output, "\n")[38:], "\n")
  endfunction
  function! g:ref_source_webdict_sites.rurema.filter(output)
    return substitute(a:output, '.*検索結果', '', '')
  endfunction
  function! g:ref_source_webdict_sites.node_toolbox.filter(output)
    return join(split(a:output, "\n")[34 :], "\n")
  endfunction
  function! g:ref_source_webdict_sites.chef_cookbooks.filter(output)
    return join(split(a:output, "\n")[18 :], "\n")
  endfunction

  " webdict default {{{4
  let g:ref_source_webdict_sites.default = 'alc'

  " webdict command {{{4
  command! -nargs=? -range=0 GTransEnJa call my#buffer#ref_gtrans(<count>, <line1>, <line2>, 'en_ja',<q-args>)
  command! -nargs=? -range=0 GTransJaEn call my#buffer#ref_gtrans(<count>, <line1>, <line2>, 'ja_en',<q-args>)

  " langs {{{4
  let g:ref_source_webdict_sites.default = 'alc'
  let g:ref_phpmanual_path=$VIM_REFDOC.'/phpman/'
  let g:ref_javadoc_path = $VIM_REFDOC.'/jdk-6-doc/ja'
  let g:ref_jquery_path = $VIM_REFDOC.'/jqapi-latest/docs'
  let g:ref_html_path=$VIM_REFDOC.'/htmldoc/www.aptana.com/reference/html/api'
  let g:ref_html5_path=$VIM_REFDOC.'/html5doc/dist'
  let g:ref_jscore_path=$VIM_REFDOC.'/jscore/www.aptana.com/reference/html/api'
  let g:ref_jsdom_path=$VIM_REFDOC.'/jscore/www.aptana.com/reference/html/api'
  "let g:ref_jquery_use_cache = 1
  let g:ref_nodejsdoc_dir=$VIM_REFDOC.'/nodejs/doc'

  if executable('ruby') && executable('rurema')
    let g:ref_refe_cmd     = "rurema"
    let g:ref_refe_version = 2
  endif
  if d#is_win()
    let g:ref_refe_encoding = 'cp932'
  else
    " let g:ref_refe_encoding = 'utf-8'
    " if exists('$RSENSE_HOME') && executable($RSENSE_HOME.'/bin/rsense')
    "   let g:ref_refe_rsense_cmd = $RSENSE_HOME.'/bin/rsense'
    " endif
  endif
  let g:ref_perldoc_complete_head = 1
  " }}}

  if d#is_installed('vim-altercmd')
    LCAlias Ref
    " for src in ['refe', 'ri', 'perldoc', 'man'
    "       \ , 'pydoc', 'jsref', 'jquery'
    "       \ , 'cppref', 'cheat', 'nodejs', ]
    "   silent! exe 'Alias' src 'Ref' src
    " endfor
    Alias rd Ref ri
    Alias pd Ref perldoc
    Alias phd Ref phpmanual
    Alias pyd Ref pydoc
    Alias jsd Ref jsref
    Alias jqd Ref jquery
    Alias cppd Ref phpmanual
    Alias nd Ref nodejs
    Alias webd[ict] Ref webdict
    Alias mr Ref webdict
    Alias al[c] Ref webdict alc
  endif

  augroup vimrc-plugin-ref
    autocmd!
    autocmd FileType ruby.rspec,php.phpunit,python.nosetests,perl.prove call s:testcase_lazy_init()
  augroup END

  function! s:testcase_lazy_init()
    call ref#register_detection('ruby.rspec', 'refe', 'append')
    call ref#register_detection('php.phpunit', 'phpmanual', 'append')
    call ref#register_detection('python.nosetests', 'pydoc', 'append')
    call ref#register_detection('perl.prove', 'perldoc', 'append')
    augroup vimrc-plugin-ref
      autocmd!
    augroup END
  endfunction
'''
[[plugins]]
repo = 'pekepeke/ref-javadoc'
[[plugins]]
repo = 'soh335/vim-ref-jquery'
[[plugins]]
repo = 'taka84u9/vim-ref-ri'
[[plugins]]
repo = 'mfumi/ref-dicts-en'
# repo = 'nishigori/vim-ref-phpunit'
# repo = 'eiiches/vim-ref-gtkdoc'
# repo = 'eiiches/vim-ref-info'
# repo = 'mojako/ref-sources.vim'

# vim {{{4
[[plugins]]
repo = 'kana/vim-vspec'
[[plugins]]
repo = 'vim-jp/vital.vim'
on_cmd = ['Vitalize']

# vim-help {{{4
[[plugins]]
repo = 'mattn/learn-vimscript'

# [[plugins]]
# repo = 'Shougo/deoppet.nvim'
# hook_add = '''
# '''


[[plugins]]
repo = 'hrsh7th/vim-neco-calc'
[[plugins]]
repo = 'rhysd/github-complete.vim'
hook_add = '''
  if !d#is_mac() && !d#is_win()
    let g:github_complete_emoji_japanese_workaround = 1
  endif
  " let g:github_complete_enable_neocomplete = d#is_installed('neocomplete.vim')
'''
[[plugins]]
repo = 'wellle/tmux-complete.vim'

# ruby {{{4
[[plugins]]
repo = 'vim-ruby/vim-ruby'
[[plugins]]
repo = 'tpope/vim-rails'
hook_add = '''
  let g:rails_some_option = 1
  let g:rails_level = 4
  let g:rails_syntax = 1
  let g:rails_statusline = 1
  let g:rails_url='http://localhost:3000'
  let g:rails_subversion=0
  let g:rails_default_file='config/database.yml'

  function! s:vimrc_rails_init()
    nnoremap <buffer>[!space]vv :Rview<CR>
    nnoremap <buffer>[!space]cc :Rcontroller<CR>
    nnoremap <buffer>[!space]mm :Rmodel<Space>
    nnoremap <buffer>[!space]pp :Rpreview<CR>

    nnoremap <buffer> [!space]r :R<CR>
    nnoremap <buffer> [!space]a :A<CR>

    Rnavcommand api app/controllers/api -glob=**/* -suffix=_controller.rb
    " Rnavcommand tmpl app/controllers/tmpl -glob=**/* -suffix=_controller.rb
    Rnavcommand config config   -glob=*.*  -suffix= -default=routes.rb
    nnoremap <buffer>[!app]v  :<C-U>Unite rails/view<CR>
    nnoremap <buffer>[!app]m  :<C-U>Unite rails/model<CR>
    nnoremap <buffer>[!app]c  :<C-U>Unite rails/controller<CR>
    nnoremap <buffer>[!app]C  :<C-U>Unite rails/config<CR>
    nnoremap <buffer>[!app]s  :<C-U>Unite rails/spec<CR>
    nnoremap <buffer>[!app]m  :<C-U>Unite rails/db -input=migrate<CR>
    nnoremap <buffer>[!app]l  :<C-U>Unite rails/lib<CR>

    " nnoremap <buffer><expr><C-H>g     ':e '.b:rails_root.'/Gemfile<CR>'
    " nnoremap <buffer><expr><C-H>r     ':e '.b:rails_root.'/config/routes.rb<CR>'
    " nnoremap <buffer><expr><C-H>se    ':e '.b:rails_root.'/db/seeds.rb<CR>'
    " nnoremap <buffer><C-H>ra          :<C-U>Unite rails/rake<CR>
    " nnoremap <buffer><C-H>h           :<C-U>Unite rails/heroku<CR>
  endfunction

  MyAutoCmd User Rails call s:vimrc_rails_init()
'''
[[plugins]]
repo = 'basyura/unite-rails'
[[plugins]]
repo = 'skwp/vim-rspec'
on_cmd = ['RunSpec', 'RSpecLine', 'RunSpecs', 'RunSpecLine']
[[plugins]]
repo = 'tpope/vim-bundler'
[[plugins]]
repo = 'ecomba/vim-ruby-refactoring'
hook_add = '''
" let g:ruby_refactoring_map_keys = 0
'''
[[plugins]]
repo = 'tpope/vim-cucumber'
[[plugins]]
repo = 'yaymukund/vim-rabl'
[[plugins]]
repo = 'vim-scripts/eruby.vim'
[[plugins]]
repo = 'hashivim/vim-vagrant'
[[plugins]]
repo = 't9md/vim-chef'
[[plugins]]
repo = 'rodjek/vim-puppet'
[[plugins]]
repo = 'joker1007/vim-ruby-heredoc-syntax'
hook_add = '''
  let g:ruby_heredoc_syntax_filetypes = {
    \  "sql" : {
    \    "start" : "SQL",
    \ },
    \ }
'''

# [[plugins]]
#   repo = 'rhysd/unite-ruby-require.vim'
# [[plugins]]
#   repo = 'rhysd/neco-ruby-keyword-args'

# [[plugins]]
# repo = 'ujihisa/unite-gem'
# [[plugins]]
# repo = 'ujihisa/unite-rake'
# [[plugins]]
# repo = 'moro/unite-stepdefs'
[[plugins]]
repo = 'astashov/vim-ruby-debugger'
on_cmd = ['Rdebugger']
hook_add = '''
let g:ruby_debugger_no_maps = 1
'''

# html {{{4
[[plugins]]
repo = 'othree/html5.vim'
hook_add = '''
let g:event_handler_attributes_complete = 1
let g:rdfa_attributes_complete = 1
let g:microdata_attributes_complete = 1
let g:aria_attributes_complete = 1
'''
[[plugins]]
repo = 'heracek/HTML-AutoCloseTag'
# [[plugins]]
# repo = 'https://gist.github.com/pekepeke/6576341'
# on_map = '<Plug>'
# script_type = 'plugin'
# hook_add = '''
# nmap ,/ <Plug>(endtagcomment)
# '''
#  templates
[[plugins]]
repo = 'tpope/vim-haml'
[[plugins]]
repo = 'digitaltoad/vim-jade'
[[plugins]]
repo = 'mustache/vim-mustache-handlebars'
[[plugins]]
repo = 'chrisgillis/vim-bootstrap3-snippets'

# css {{{4
[[plugins]]
repo = 'Rykka/colorv.vim'
hook_add = '''
  let g:colorv_cache_fav = $VIM_CACHE . "/vim_colorv_fav"
  let g:colorv_cache_file = $VIM_CACHE . "/vim_colorv_cache"
  " let g:colorv_preview_ftype = 'css,html,scss,sass'
  let g:colorv_preview_ftype = 'css,scss,sass'
  " let g:colorv_python_cmd = ''
  let g:colorv_no_global_map = 1
  " g:colorv_global_leader
'''
# \ 'on_ft': ['html','javascript','css','sass','scss','less','slim','stylus'],
# repo = 'gorodinskiy/vim-coloresque'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
[[plugins]]
repo = 'npacker/vim-css3complete'
[[plugins]]
repo = 'groenewege/vim-less'
[[plugins]]
repo = 'wavded/vim-stylus'
[[plugins]]
repo = 'slim-template/vim-slim'

# javascript {{{4
[[plugins]]
repo = 'isRuslan/vim-es6'
[[plugins]]
repo = 'guileen/simple-javascript-indenter'
# repo = 'othree/yajs.vim'
[[plugins]]
repo = 'pangloss/vim-javascript'
[[plugins]]
repo = 'mxw/vim-jsx'
# repo = 'jsx/vim-jsx'
# repo = 'moll/vim-node'
[[plugins]]
repo = 'pekepeke/vim-node'
hook_add = '''
  let node#filetypes = ["javascript", "json", 'coffee']
  let node#suffixesadd = [] " already registered at ftplugin
'''

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
[[plugins]]
repo = 'claco/jasmine.vim'
[[plugins]]
repo = 'elzr/vim-json'
[[plugins]]
repo = 'Quramy/vison'
on_cmd = [ 'VisonSetup', 'Vison', 'VisonRemoveSchema', 'VisonRegisterSchema']

[[plugins]]
repo = 'chikatoike/sourcemap.vim'
on_cmd = [
	'SourceMapAddMap', 'SourceMapSwitch', 'SourceMapConvertQuickfixToOriginal',
   'SourceMapConvertLocListToOriginal', 'SourceMapAddOriginalToQuickfix',
   'SourceMapAddOriginalToLocList',
]
[[plugins]]
repo = 'briancollins/vim-jst'

[[plugins]]
repo = 'vim-scripts/Dart'
[[plugins]]
repo = 'jdonaldson/vaxe'
on_ft = ['haxe','hxml','nmml']
[[plugins]]
repo = 'kchmck/vim-coffee-script'
[[plugins]]
repo = 'leafgarland/typescript-vim'
# repo = 'Quramy/tsuquyomi'
# \ 'on_ft': 'typescript',
# \ }

# python {{{4
# http://rope.sourceforge.net/
[[plugins]]
repo = 'klen/python-mode'
hook_add = '''
let g:pymode_rope = 1
let g:pymode_rope_lookup_project = 1
let g:pymode_rope_regenerate_on_write = 0
let g:pymode_rope_goto_def_newwin = 'new'
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_run = 0
let g:pymode_doc = 0
let g:pymode_lint = 0
let g:pymode_virtualenv = 0
let g:pymode_rope_global_prefix = '[!rope]'
" let g:vimrc_pymode_rope_project_dirprefixes = [expand("~/project")]
'''
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
[[plugins]]
repo = 'lambdalisue/vim-python-virtualenv'
[[plugins]]
repo = 'gerardo/vim-django-support'
[[plugins]]
repo = 'voithos/vim-python-matchit'
[[plugins]]
repo = 'heavenshell/vim-pydocstring'
[[plugins]]
repo = 'hachibeeDI/unite-pythonimport'
[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

# perl {{{4
[[plugins]]
repo = 'vim-perl/vim-perl'
[[plugins]]
repo = 'moznion/vim-cpanfile'
[[plugins]]
repo = 'motemen/xslate-vim'
[[plugins]]
repo = 'y-uuki/perl-local-lib-path.vim'
# [[plugins]]
# repo = 'y-uuki/unite-perl-module.vim'
# [[plugins]]
# repo = 'soh335/unite-perl-module'

# C,CPP {{{4
[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
[[plugins]]
repo = 'peterhoeg/vim-qml'

# C# {{{4
[[plugins]]
repo = 'OrangeT/vim-csharp'
# \ 'on_ft': ['cs'],
# \ }

    # repo = 'OmniSharp/omnisharp-vim'
    # \ 'on_ft': ['cs'],
    # \ 'build': {
    # \   'windows': 'MSBuild.exe server/OmniSharp.sln /p:Platform="Any CPU"',
    # \   'mac': 'xbuild server/OmniSharp.sln',
    # \   'unix': 'xbuild server/OmniSharp.sln',
    # \ }
# hook_add = '''
# " let g:OmniSharp_host = "http://localhost:2000"
# let g:OmniSharp_typeLookupInPreview = 1
# '''

# OSX {{{4
[[plugins]]
repo = 'vim-scripts/applescript.vim'

# windows {{{4
[[plugins]]
repo = 'PProvost/vim-ps1'
[[plugins]]
repo = 'cd01/poshcomplete-vim'
hook_add = '''
  MyAutoCmd FileType ps1 setlocal omnifunc=poshcomplete#CompleteCommand
'''
[[plugins]]
repo = 'hachibeeDI/vim-vbnet'
on_ft = 'vb'

# java, android {{{4
# [[plugins]]
# repo = 'mikelue/vim-maven-plugin'
[[plugins]]
repo = 'kamichidu/unite-javaimport'
[[plugins]]
repo = 'kamichidu/vim-javaclasspath'
[[plugins]]
repo = 'artur-shaik/vim-javacomplete2'
# [[plugins]]
# repo = 'vim-scripts/jcommenter.vim'
[[plugins]]
repo = 'vim-scripts/groovyindent-unix'
[[plugins]]
repo = 'vim-scripts/groovy.vim'
[[plugins]]
repo = 'tfnico/vim-gradle'
[[plugins]]
repo = 'martinda/Jenkinsfile-vim-syntax'
[[plugins]]
repo = 'thinca/vim-logcat'
on_cmd = ['Logcat', 'LogcatClear']
[[plugins]]
repo = 'lepture/vim-velocity'
[[plugins]]
repo = 'ryotakato/unite-gradle'

# scala {{{4
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

# go {{{4
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
[[plugins]]
repo = 'undx/vim-gocode'

# texts {{{4
[[plugins]]
repo = 'tpope/vim-markdown'
[[plugins]]
repo = 'nelstrom/vim-markdown-folding'
[[plugins]]
repo = 'tani/vim-glance'
hook_add = '''
" \   'https://esm.sh/markdown-it-markmap',
let g:glance#markdown_plugins = [
\   'https://esm.sh/markdown-it-emoji',
\   'https://esm.sh/markdown-it-mermaid',
\   'https://esm.sh/markdown-it-plantuml',
\    'https://esm.sh/markdown-it-highlightjs',
\ ]
'''
[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
  let g:previm_enable_realtime=1
'''
# repo = 'beckorz/previm'
[[plugins]]
repo = 'timcharper/textile.vim'
[[plugins]]
repo = 'aklt/plantuml-syntax'
# repo = 'maxmeyer/vim-taskjuggler'
[[plugins]]
repo = 'mozamimy/nymphia.vim'

[[plugins]]
repo = 'moznion/hateblo.vim'
on_cmd = [
    'HatebloCreate', 'HatebloCreateDraft', 'HatebloList',
    'HatebloUpdate', 'HatebloDelete',
]
[[plugins]]
repo = 'moro/vim-review'
[[plugins]]
repo = 'nvie/vim-rst-tables'
[[plugins]]
repo = 'vim-scripts/sequence'

# haskell {{{4
[[plugins]]
repo = 'itchyny/vim-haskell-indent'
[[plugins]]
repo = 'dag/vim2hs'
[[plugins]]
  repo = 'eagletmt/ghcmod-vim'
[[plugins]]
  repo = 'elixir-lang/vim-elixir'
[[plugins]]
  repo = 'ujihisa/ref-hoogle'
  # repo = 'ujihisa/neco-ghc'
  # repo = "ujihisa/unite-haskellimport"
  # repo = 'eagletmt/unite-haddock'

# php {{{4
# [[plugins]]
# repo = 'captbaritone/better-indent-support-for-php-with-html'

[[plugins]]
repo = 'tobyS/pdv'
hook_add = '''
  " TODO
  " let g:pdv_template_dir =  neobundle#get('pdv').rtp . '/templates'
'''

[[plugins]]
repo = '2072/PHP-Indenting-for-VIm'
# repo = 'Gasol/vim-php'
[[plugins]]
repo = 'StanAngeloff/php.vim'
# repo = 'arnaud-lb/vim-php-namespace'
# repo = 'pekepeke/phpfoding.vim'
# [[plugins]]
# repo = 'noahfrederick/vim-composer'
[[plugins]]
repo = 'adoy/vim-php-refactoring-toolbox'
hook_add = '''
  let g:vim_php_refactoring_use_default_mapping = 0

  " let g:vim_php_refactoring_auto_validate_sg = 1
  " let g:vim_php_refactoring_auto_validate_rename = 1
  " let g:vim_php_refactoring_auto_validate_visibility = 1
  " let g:vim_php_refactoring_default_property_visibility = 'private'
  " let g:vim_php_refactoring_default_method_visibility = 'private'
  command! -nargs=0 PhpRenameLocalVariable call PhpRenameLocalVariable()
  command! -nargs=0 PhpRenameClassVariable call PhpRenameClassVariable()
  command! -nargs=0 PhpRenameMethod call PhpRenameMethod()
  command! -nargs=0 PhpExtractUse call PhpExtractUse()
  command! -nargs=0 PhpExtractConst call PhpExtractConst()
  command! -nargs=0 PhpExtractClassProperty call PhpExtractClassProperty()
  command! -nargs=0 PhpExtractMethod call PhpExtractMethod()
  command! -nargs=0 PhpCreateProperty call PhpCreateProperty()
  command! -nargs=0 PhpDetectUnusedUseStatements call PhpDetectUnusedUseStatements()
  command! -nargs=0 PhpAlignAssigns call PhpAlignAssigns()
  command! -nargs=0 PhpCreateSettersAndGetters call PhpCreateSettersAndGetters()
  command! -nargs=0 PhpDocAll call PhpDocAll()
'''
# repo = 'beberlei/vim-php-refactor'
# [[plugins]]
# repo = 'violetyk/cake.vim'
[[plugins]]
repo = 'noahfrederick/vim-laravel'
[[plugins]]
repo = 'jwalton512/vim-blade'

# sql {{{4
[[plugins]]
repo = 'mattn/vdbi-vim'
[[plugins]]
repo = 'vim-scripts/dbext.vim'
on_cmd = [
  'DBExecSQL', 'DBConnect', 'DBDisconnectAll', 'DBRollback', 'DBExecRangeSQL',
  'Select', 'Alter', 'Update', 'Insert', 'Delete', 'Drop', 'DBSetOption',
  'DBGetOption', 'DBVarRangeAssign', 'DBListVar', 'DBSetVar',
]
hook_add = '''
  let g:dbext_default_prompt_for_parameters=0
  let g:dbext_default_history_file=expand('$VIM_CACHE/dbext_sql_history.txt')
  let g:dbext_default_menu_mode=0
  command! -nargs=+ -complete=customlist,dbext#DB_completeTables SELECT :call dbext#DB_execSql("select " . <q-args>)
'''

# etc {{{4
[[plugins]]
repo = 'honza/dockerfile.vim'
[[plugins]]
repo = 'chase/vim-ansible-yaml'
[[plugins]]
repo = 'MicahElliott/Rocannon'
[[plugins]]
repo = 'cespare/vim-toml'
[[plugins]]
repo = 'xolox/vim-misc'
[[plugins]]
repo = 'vim-scripts/httplog'
[[plugins]]
repo = 'vim-scripts/syslog-syntax-file'
[[plugins]]
repo = 'uarun/vim-protobuf'
[[plugins]]
repo = 'sophacles/vim-processing'
[[plugins]]
repo = 'pekepeke/ref-processing-vim'
on_ft = 'processing'
[[plugins]]
repo = 'sjl/strftimedammit.vim'
[[plugins]]
repo = 'tangledhelix/vim-octopress'
[[plugins]]
repo = 'jcfaria/Vim-R-plugin'
on_ft = 'r'
[[plugins]]
repo = 'rbtnn/vimconsole.vim'
on_cmd = [
  'VimConsoleLog', 'VimConsoleOpen', 'VimConsoleWarn', 'VimConsoleError',
  'VimConsoleError', 'VimConsoleToggle', 'VimConsoleClear', 'VimConsoleRedraw',
]
hook_add = '''
  let g:vimconsole#auto_redraw = 1
  let g:vimconsole#maximum_caching_objects_count = 1000

  nnoremap [!space]vc :<C-u>VimConsoleToggle<CR>

    MyAutoCmd FileType vimconsole call s:vimrc_vimconsole_init()
    function! s:vimrc_vimconsole_init() "{{{3
      nnoremap <buffer> <C-l> :<C-u>VimConsoleRedraw<CR>
    endfunction
'''
[[plugins]]
repo = 'basyura/rmine.vim'
on_cmd = [ 'Rmine', 'RmineIssue', 'RmineNewIssue']

# config {{{4
[[plugins]]
repo = 'qqshfox/vim-tmux'
[[plugins]]
repo = 'vim-scripts/nginx.vim'
[[plugins]]
repo = 'smerrill/vcl-vim-plugin'
[[plugins]]
repo = 'ksauzz/haproxy.vim'
# [[plugins]]
# repo = 'empanda/vim-varnish.vim'
[[plugins]]
repo = 'glidenote/keepalived-syntax.vim'
# repo = 'Shougo/vim-nyaos'

# unite.vim {{{3
# repo = 'Shougo/unite.vim'
# #
# # \   'on_cmd' : ['Unite', 'UniteBookmarkAdd']
# # \ }
# repo = 'Shougo/neomru.vim'
# #
# # \ 'on_unite': ['file_mru', 'directory_mru',
# # \   'neomru/file', 'neomru/directory']
# # \ }
# repo = 'Shougo/neoyank.vim'
# repo = 'thinca/vim-unite-history'
# repo = 'Shougo/unite-help'
# \ 'on_source': 'unite.vim',
# \ }
# repo = 'tacroe/unite-mark'
# \ 'on_source': 'unite.vim',
# \ }
# repo = 'zhaocai/unite-scriptnames'
# # repo = 'pasela/unite-webcolorname'
# # \ 'on_source': 'unite.vim',
# # \ }
# # repo = 'ujihisa/unite-colorscheme'
# # \ 'on_source': 'unite.vim',
# # \ }
# # repo = 'LeafCage/unite-gvimrgb'
# # \ 'on_source': 'unite.vim',
# # \ }
# # repo = 'Shougo/unite-build'
# # \ 'on_source': 'unite.vim',
# # \ }
# repo = 'Shougo/unite-outline'
# # repo = 'kmnk/vim-unite-giti'
# # repo = 'sgur/unite-git_grep'
# # \ 'on_source': 'unite.vim',
# # \ }
# repo = 'osyo-manga/unite-highlight'
# \ 'on_source': 'unite.vim',
# \ }
# repo = 'osyo-manga/unite-candidate_sorter'
# on_map = [['n', '<Plug>(unite-candidate_sort)']]
# \ }
# repo = 'osyo-manga/unite-quickfix'
# repo = "osyo-manga/unite-quickrun_config"
# repo = 'eiiches/unite-tselect'
# hook_add = '''
#   nnoremap <silent> [!t]t :<C-u>Unite tselect:<C-r>=expand('<cword>')<CR> -immediately<CR>
#   nnoremap <silent> <C-w>tt <C-w>s:<C-u>Unite tselect:<C-r>=expand('<cword>')<CR> -immediately<CR>
# '''
# repo = 'tsukkee/unite-tag'
# \ 'on_source': 'unite.vim',
# \ }
# # repo = 'hewes/unite-gtags'
# # \ 'on_source': 'unite.vim',
# # \ }
# repo = 'rafi/vim-unite-issue'
# \ 'depends' : ['mattn/webapi-vim',  'tyru/open-browser.vim',  'Shougo/unite.vim'],
# \ }
# repo = 'haya14busa/unite-ghq'
# if s:exec_ruby && executable('watson')
#   repo = 'alpaca-tc/vim-unite-watson.vim'
# on_cmd = 'Watson',
#   \ 'depends' : 'Shougo/unite.vim',
#   \ 'on_source': 'unite.vim',
#   \ }
# endif
[[plugin]]
repo = 'pekepeke/quicklearn'
hook_add = '''
let g:quicklearn = get(g:, 'quicklearn', {})
call extend(g:quicklearn, {
  \ 'markdown/md2remark/intermediate' : {
  \   'command' : 'md2remark',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/md2backlog/intermediate' : {
  \   'command' : 'md2backlog',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/vim-helpfile/intermediate' : {
  \   'command' : 'vim-helpfile',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/markdown2pod/intermediate' : {
  \   'command' : 'markdown2pod',
  \   'exec' : '%c %o %s',
  \ },
  \ })
call extend(g:quicklearn, {
  \ 'markdown/textile/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t textile %o %s',
  \ },
  \ 'markdown/rst/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t rst %o %s',
  \ },
  \ 'markdown/html5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t html5 %o %s',
  \ },
  \ 'markdown/mediawiki/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t mediawiki %o %s',
  \ },
  \ 'markdown/s5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t s5 %o %s',
  \ },
  \ 'markdown/revealjs/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t revealjs %o %s',
  \ },
  \ 'markdown/dzslides/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t dzslides %o %s',
  \ },
  \ 'markdown/slidy/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t slidy %o %s',
  \ },
  \ 'markdown/slideous/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t slideous %o %s',
  \ },
  \ 'markdown/beamer/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t beamer %o %s',
  \ },
  \ 'markdown/latex/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t latex %o %s',
  \ },
  \ 'markdown/rtf/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t rtf %o %s',
  \ },
  \ })
call extend(g:quicklearn, {
  \ 'textile/markdown/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t markdown %o %s',
  \ },
  \ 'textile/rst/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t rst %o %s',
  \ },
  \ 'textile/html5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t html5 %o %s',
  \ },
  \ 'textile/mediawiki/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t mediawiki %o %s',
  \ },
  \ 'textile/s5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t s5 %o %s',
  \ },
  \ 'textile/slidy/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t slidy %o %s',
  \ },
  \ 'textile/slideous/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t slideous %o %s',
  \ },
  \ 'textile/beamer/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t beamer %o %s',
  \ },
  \ 'textile/latex/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t latex %o %s',
  \ },
  \ 'textile/rtf/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t rtf %o %s',
  \ },
  \ })
call extend(g:quicklearn, {
  \ 'rst/markdown/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t markdown %o %s',
  \ },
  \ 'rst/textile/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t textile %o %s',
  \ },
  \ 'rst/html5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t html5 %o %s',
  \ },
  \ 'rst/mediawiki/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t mediawiki %o %s',
  \ },
  \ 'rst/s5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t s5 %o %s',
  \ },
  \ 'rst/slidy/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t slidy %o %s',
  \ },
  \ 'rst/slideous/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t slideous %o %s',
  \ },
  \ 'rst/beamer/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t beamer %o %s',
  \ },
  \ 'rst/latex/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t latex %o %s',
  \ },
  \ 'rst/rtf/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t rtf %o %s',
  \ },
  \ })
  call extend(g:quicklearn, {
  \ 'rst/rst2html/intermediate': {
  \   'command': 'rst2html',
  \   'exec': '%c %o %s',
  \ },
  \ })
'''
# repo = "osyo-manga/unite-fold"
# \ 'on_source': 'unite.vim',
# \ }
# repo = "monochromegane/unite-yaml"
# \ 'on_source': 'unite.vim',
# \ 'on_ft': ['yaml'],
# \ }
# repo = 'RomainEndelin/fusion.vim'
# \ 'on_source': 'unite.vim',
# \ }
# repo = 'pekepeke/vim-unite-repo-files'
# \ 'on_source': 'unite.vim',
# \ }
# repo = 'pekepeke/vim-unite-z'
# \ 'on_source': 'unite.vim',
# \ }

# if d#is_win()
#   repo = 'sgur/unite-everything'
#   \ 'on_source': 'unite.vim',
#   \ }
# else
#   if d#is_mac()
#   else
#     repo = 'ujihisa/unite-locate'
#     \ 'on_source': 'unite.vim',
#     \ }
#   endif
#   repo = 'ujihisa/neco-look'
# endif

# www {{{3
[[plugins]]
repo = 'tyru/open-browser.vim'
on_func = ['OpenBrowser']
on_cmd = [ 'OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
on_map = '<Plug>'
hook_add = '''
  nmap [!space]u <Plug>(openbrowser-open)
  vmap [!space]u <Plug>(openbrowser-open)
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq']
[[plugins]]
repo = 'junegunn/vim-github-dashboard'
on_cmd = [ 'GHD', 'GHA', 'GHDashboard', 'GHActivity' ]
[[plugins]]
repo = 'mattn/webapi-vim'
[[plugins]]
repo = 'mattn/excitetranslate-vim'
on_cmd = ['ExciteTranslate']
[[plugins]]
repo = 'mattn/gist-vim'
on_cmd = ['Gist']

