# vim:fdm=marker sw=2 ts=2 ft=toml expandtab:
# ftplugin {{{1
[ftplugin] # Execute after ftplugin.
c = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> . synchat#isnt_src()?'.':smartchr#one_of('.', '->', '..')
endif
'''

cpp = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> . synchat#isnt_src()?'.':smartchr#one_of('.', '->', '..')
endif
'''

html = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> @ synchat#isnt_src()?'@':smartchr#one_of('@', 'this.', '@@')
endif
'''
javascript = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer> <expr> \  synchat#isnt_src()?'\':smartchr#one_of('\', 'function(', '\\')
  inoremap <buffer><expr> @ synchat#isnt_src()?'@':smartchr#one_of('@', 'this.', '@@')
  inoremap <buffer><expr> > synchat#isnt_src()?'>':smartchr#one_of('>', '=>', '>>')
endif
'''

typescript = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> @ synchat#isnt_src()?'@':smartchr#one_of('@', 'this.', '@@')
  inoremap <buffer><expr> > synchat#isnt_src()?'>':smartchr#one_of('>', '=>', '>>')
endif
'''

typescriptreact = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> @ synchat#isnt_src()?'@':smartchr#one_of('@', 'this.', '@@')
  inoremap <buffer><expr> > synchat#isnt_src()?'>':smartchr#one_of('>', '=>', '>>')
endif
'''

coffee = '''
if d#is_installed('vim-smartchr')
  inoremap <expr> <buffer> { smartchr#loop('{', '#{', '{{')
  inoremap <buffer><expr> > synchat#isnt_src()?'>':smartchr#one_of('>', '->', '>>')
  inoremap <buffer><expr> - synchat#isnt_src()?'-':smartchr#one_of('-', '->', '--')
  inoremap <buffer><expr> \ synchat#isnt_src()?'\':smartchr#one_of('\', '->', '=>', '\\')
  inoremap <buffer><expr> . synchat#isnt_src()?'.':smartchr#one_of('.', '->', '..')
  inoremap <expr><buffer> #
    \ synchat#is('coffeeString\|coffeeInterporation\|coffeeInterporationDelimiter')
    \ ? smartchr#loop('#', '#{', '##') : '#'
endif
'''
perl = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> @ synchat#isnt_src()?'@':smartchr#one_of('@', '$self->', '@@')
  inoremap <buffer><expr> . synchat#isnt_src()?'.':smartchr#one_of('.', '->', '..')
  inoremap <buffer><expr> > synchat#isnt_src()?'>':smartchr#one_of('>', '=>', '>>')
endif
'''

ruby = '''
if d#is_installed('vim-smartchr')
  inoremap <expr><buffer> #
        \ synchat#is('rubyString\|rubyInterporation\|rubyInterporationDelimiter')
        \ ? smartchr#loop('#', '#{', '##') : '#'
  inoremap <expr><buffer> > synchat#is('rubyString\|rubyInterporation\|rubyInterporationDelimiter')?
        \ '>' : smartchr#one_of('>', '=>', '>>')
endif
'''

zsh = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer> <expr> \ synchat#isnt_src()?'\':smartchr#one_of('\', 'function ', '\\')
endif
'''

php = '''
if d#is_installed('vim-smartchr')
  inoremap <buffer><expr> \ synchat#isnt_src()?'\':smartchr#one_of('\', 'function', '\\')
  inoremap <buffer><expr> @ synchat#isnt_src()?'@':smartchr#one_of('@', '$this->', 'self::$', '@@')
  inoremap <buffer><expr> . synchat#isnt_src()?'.':smartchr#one_of('.', '->', '..')
  inoremap <buffer><expr> > synchat#isnt_src()?'>':smartchr#one_of('>', '=>', '>>')
endif
'''

# colorscheme {{{1
[[plugins]]
repo = 'sainnhe/gruvbox-material'
script_type = 'colors'
[[plugins]]
repo = 'freeo/vim-kalisi'
script_type = 'colors'
[[plugins]]
repo = 'tpope/vim-vividchalk'
script_type = 'colors'
[[plugins]]
repo = 'tomasr/molokai'
script_type = 'colors'
[[plugins]]
repo = 'mopp/mopkai.vim'
script_type = 'colors'
[[plugins]]
repo = 'mrkn/mrkn256.vim'
script_type = 'colors'
[[plugins]]
repo = 'fmoralesc/vim-vitamins'
script_type = 'colors'
[[plugins]]
repo = 'morhetz/gruvbox'
script_type = 'colors'
[[plugins]]
repo = 'vim-scripts/Lucius'
script_type = 'colors'
[[plugins]]
repo = 'jaromero/vim-monokai-refined'
script_type = 'colors'
[[plugins]]
repo = 'freeo/vim-kalisi'
script_type = 'colors'
[[plugins]]
repo = 'w0ng/vim-hybrid'
script_type = 'colors'

# common {{{1
# =======================================================
[[plugins]]
repo = 'vim-denops/denops-shared-server.vim'
[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
let g:context_filetype#search_offset = 500
let g:context_filetype#filetypes = get(g:, 'context_filetype#filetypes', {})

let g:context_filetype#filetypes.html = [{
      \  'start':
      \   '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
      \  'end': '</script>', 'filetype': 'javascript',
      \ }, {
      \  'start':
      \   '<script\%( [^>]*\)\? type="text/coffee"\%( [^>]*\)\?>',
      \  'end': '</script>', 'filetype': 'coffee',
      \ }, {
      \   'start': '<script[^>]*shader[^>]*>',
      \   'end': '<\/script>', 'filetype' : 'glsl',
      \ }, {
      \  'start': '<style\%( [^>]*\)\? type="text/css"\%( [^>]*\)\?>',
      \  'end': '</style>', 'filetype': 'css',
      \ }, {
      \  'start': '<?php\?',
      \  'end': '?>', 'filetype': 'php',
      \ } ]
let g:context_filetype#filetypes.qml = [{
      \   'filetype' : 'javascript',
      \   'start'    : '^\(\s*\)\h\w*:\s*{$',
      \   'end'      : '^\1}'
      \ }, {
      \   'filetype' : 'glsl',
      \   'start'    : ':\s*"',
      \   'end'      : '"'
      \ },
      \ ]
'''

# =======================================================
[[plugins]]
repo = 'Shougo/tabpagebuffer.vim'

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_cmd = ['JunkfileOpen']
hook_add = '''
nnoremap ,sj :<C-u>JunkfileOpen<CR>
'''
[[plugins]]
repo = 'voldikss/vim-translator'
hook_add = '''
let g:translator_target_lang = 'ja'
let g:translator_default_engines = ['google', 'bing']
'''
# =======================================================
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
  let g:ale_linters = {
    \ }
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " let g:ale_lint_on_text_changed = 'never'
  " let g:ale_lint_on_enter = 0
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  " let g:ale_open_list = 1
  " let g:ale_keep_list_window_open = 1
'''

# =======================================================
[[plugins]]
repo = 'kana/vim-altr'
on_map = '<Plug>'
hook_add = '''
nmap [!space]k <Plug>(altr-back)
nmap [!space]j <Plug>(altr-forward)
nmap <F1> <Plug>(altr-back)
nmap <F2> <Plug>(altr-forward)

call altr#define('autoload/%.vim', 'doc/%.txt', 'plugin/%.vim', 'test/%.vim')

call altr#define('%.c', '%.cpp', '%.m', '%.h')

call altr#define('%.rb', 'spec/%_spec.rb')
call altr#define('lib/%.rb', 'spec/lib/%_spec.rb')
call altr#define('app/models/%.rb', 'spec/models/%_spec.rb', 'spec/factories/%s.rb')
call altr#define('app/controllers/%.rb', 'spec/controllers/%_spec.rb')
call altr#define('app/helpers/%.rb', 'spec/helpers/%_spec.rb')

call altr#define('%.js', 'test/%Test.js', 'test/%_test.js', 'spec/%_spec.js', 'spec/%Spec.js')
call altr#define('%.coffee', 'test/%Test.coffee', 'test/%_test.coffee', 'spec/%_spec.coffee', 'spec/%Spec.coffee')

call altr#define('app/controllers/%.php', 'app/tests/controllers/%Test.php')
call altr#define('app/models/%.php', 'app/tests/models/%Test.php')
call altr#define('app/commands/%.php', 'app/tests/commands/%Test.php')
call altr#define('app/views/%.php', 'app/tests/libs/%Test.php')
call altr#define('app/views/%.php', 'app/tests/views/%Test.php')

call altr#define('Controller/%.php', 'Test/Case/Controller/%Test.php')
call altr#define('Model/%.php', 'Test/Case/Model/%Test.php')
call altr#define('View/Helper/%.php', 'Test/Case/View/Helper/%Test.php')
call altr#define('View/%.php', 'Test/Case/View/%Test.php')
'''
# =======================================================
[[plugins]]
repo = 'kana/vim-fakeclip'
hook_add = '''
nmap ,y <Plug>(fakeclip-screen-y)
nmap ,p <Plug>(fakeclip-screen-p)
vmap ,y <Plug>(fakeclip-screen-y)
vmap ,p <Plug>(fakeclip-screen-p)
'''
[[plugins]]
repo = 'kana/vim-smartchr'
hook_add = '''
inoremap <expr>, smartchr#one_of(', ', ',')
'''

# =======================================================
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''

" http://d.hatena.ne.jp/tyru/20100502/vim_mappings
if d#is_mac()
  call submode#enter_with('cscroll', 'n', '', 'sb', ':ChromeScrollDown<CR>')
  " call submode#enter_with('cscroll', 'n', '', 'sk', ':ChromeScrollUp<CR>')
  call submode#map('cscroll', 'n', '', 'j', ':ChromeScrollDown<CR>')
  call submode#map('cscroll', 'n', '', 'k', ':ChromeScrollUp<CR>')
  call submode#map('cscroll', 'n', '', 'l', ':ChromeTabRight<CR>')
  call submode#map('cscroll', 'n', '', 'h', ':ChromeTabLeft<CR>')
  call submode#map('cscroll', 'n', '', 'L', ':ChromePageGo<CR>')
  call submode#map('cscroll', 'n', '', 'H', ':ChromePageBack<CR>')
  call submode#map('cscroll', 'n', '', 'r', ':ChromeTabReload<CR>')
endif

" Change current window size
call submode#enter_with('winsize', 'n', '', 'sw', '<Nop>')
call submode#leave_with('winsize', 'n', '', '<Esc>')
call submode#map       ('winsize', 'n', '', 'j', '<C-w>-:redraw<CR>')
call submode#map       ('winsize', 'n', '', 'k', '<C-w>+:redraw<CR>')
call submode#map       ('winsize', 'n', '', 'h', '<C-w><:redraw<CR>')
call submode#map       ('winsize', 'n', '', 'l', '<C-w>>:redraw<CR>')
call submode#map       ('winsize', 'n', '', 'J', ':set lines+=1<CR>')
call submode#map       ('winsize', 'n', '', 'K', ':set lines-=1<CR>')
call submode#map       ('winsize', 'n', '', 'H', ':set columns-=5<CR>')
call submode#map       ('winsize', 'n', '', 'L', ':set columns+=5<CR>')
call submode#map       ('winsize', 'n', '', '-', '<C-w>-:redraw<CR>')
call submode#map       ('winsize', 'n', '', '+', '<C-w>+:redraw<CR>')
call submode#map       ('winsize', 'n', '', '<', '<C-w><:redraw<CR>')
call submode#map       ('winsize', 'n', '', '>', '<C-w>>:redraw<CR>')

" undo/redo
call submode#enter_with('undo/redo', 'n', '', 'g-', 'g-')
call submode#enter_with('undo/redo', 'n', '', 'g+', 'g+')
call submode#leave_with('undo/redo', 'n', '', '<Esc>')
call submode#map       ('undo/redo', 'n', '', '-', 'g-')
call submode#map       ('undo/redo', 'n', '', '+', 'g+')

" Tab walk.
call submode#enter_with('tabwalk', 'n', '', 'st', '<Nop>')
call submode#enter_with('tabwalk', 'n', '', 'se', '<Nop>')
call submode#leave_with('tabwalk', 'n', '', '<Esc>')
call submode#map       ('tabwalk', 'n', '', 'h', 'gT:redraw<CR>')
call submode#map       ('tabwalk', 'n', '', 'l', 'gt:redraw<CR>')
call submode#map       ('tabwalk', 'n', '', 'H', ':execute "tabmove" tabpagenr() - 2<CR>')
call submode#map       ('tabwalk', 'n', '', 'L', ':execute "tabmove" tabpagenr()<CR>')
call submode#map       ('tabwalk', 'n', '', 'n', ':execute "tabnew"<CR>:tabmove<CR>')
call submode#map       ('tabwalk', 'n', '', 'c', ':execute "tabnew"<CR>:tabmove<CR>')
call submode#map       ('tabwalk', 'n', '', 'q', ':execute "tabclose"<CR>')
call submode#map       ('tabwalk', 'n', '', 'o', ':execute "tabonly"<CR>')

" winmove
call submode#enter_with('winmove', 'n', '', 'sj', '<C-w>j')
call submode#enter_with('winmove', 'n', '', 'sk', '<C-w>k')
call submode#enter_with('winmove', 'n', '', 'sh', '<C-w>h')
call submode#enter_with('winmove', 'n', '', 'sl', '<C-w>l')
call submode#leave_with('winmove', 'n', '', '<Esc>')
call submode#map       ('winmove', 'n', '', 'j', '<C-w>j')
call submode#map       ('winmove', 'n', '', 'k', '<C-w>k')
call submode#map       ('winmove', 'n', '', 'h', '<C-w>h')
call submode#map       ('winmove', 'n', '', 'l', '<C-w>l')
call submode#map       ('winmove', 'n', '', 'J', '<C-w>j')
call submode#map       ('winmove', 'n', '', 'K', '<C-w>k')
call submode#map       ('winmove', 'n', '', 'H', '<C-w>h')
call submode#map       ('winmove', 'n', '', 'L', '<C-w>l')

" Quickfix
call submode#enter_with('quickfix', 'n', '',  'sq', '<Nop>')
call submode#leave_with('quickfix', 'n', '',  '<Esc>')
call submode#map       ('quickfix', 'n', '',  'j', ':cn<CR>')
call submode#map       ('quickfix', 'n', '',  'k', ':cp<CR>')
call submode#map       ('quickfix', 'n', '',  'n', ':cn<CR>')
call submode#map       ('quickfix', 'n', '',  'p', ':cp<CR>')
call submode#map       ('quickfix', 'n', 'x', 'c', ':cclose<CR>')
call submode#map       ('quickfix', 'n', '',  'o', ':copen<CR>')
call submode#map       ('quickfix', 'n', '',  'w', ':cwindow<CR>')
'''

# =======================================================
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = '<Plug>'
hook_add = '''
xmap I <Plug>(niceblock-I)
xmap A <Plug>(niceblock-A)
'''

# =======================================================
[[plugins]]
repo = 'tyru/vim-altercmd'
hook_add = '''

call altercmd#load()
function! s:alias_lc(...) "
  for cmd in a:000
    silent exe 'Alias' tolower(cmd) cmd
  endfor
endfunction

command! -bar -nargs=+
      \ Alias CAlterCommand <args> | AlterCommand <cmdwin> <args>
command! -nargs=+ LCAlias call s:alias_lc(<f-args>)
" command! -bar -nargs=+ LCAlias call <SID>nop(<f-args>)
" command! -bar -nargs=+ Alias call <SID>nop(<f-args>)
"Alias q bd
Alias q MyQ
Alias wq MyWQ
Alias Q quit
Alias WQ wq

Alias ve vsplit
Alias se split
Alias n new
Alias v vnew

LCAlias Here This That
Alias ren Rename
" LCAlias Unite
'''

# =======================================================
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
call lexima#add_rule({
      \ 'at':       '(\%#)',
      \ 'char':     '<Space>',
      \ 'input':    '<Space>',
      \ 'input_after': '<Space>',
      \ 'mode': 'i',
      \ })

call lexima#add_rule({
      \ 'at': '( \%# )',
      \ 'char': '<BS>',
      \ 'input': '<BS>',
      \ 'delete': 1,
      \ 'mode': 'i',
      \ })

call lexima#add_rule({
      \ 'at':       '{\%#}',
      \ 'char':     '<Space>',
      \ 'input':    '<Space>',
      \ 'input_after': '<Space>',
      \ 'mode': 'i',
      \ })

call lexima#add_rule({
      \ 'at':       '{ \%# }',
      \ 'char':     '<BS>',
      \ 'input': '<BS>',
      \ 'delete': 1,
      \ 'mode': 'i',
      \ })

call lexima#add_rule({
      \ 'at':       '\[\%#\]',
      \ 'char':     '<Space>',
      \ 'input':    '<Space>',
      \ 'input_after': '<Space>',
      \ 'mode': 'i',
      \ })

call lexima#add_rule({
      \ 'at':       '\[ \%# \]',
      \ 'char':     '<BS>',
      \ 'input': '<BS>',
      \ 'delete': 1,
      \ 'mode': 'i',
      \ })

" Ruby 文字列内変数埋め込み
call lexima#add_rule({
      \ 'at': '\%#',
      \ 'char': '#',
      \ 'input':    '#{',
      \ 'input_after': '}',
      \ 'filetype': ['ruby'],
      \ 'syntax': ['Constant', 'Special'],
      \ 'mode': 'i',
      \ })

" Ruby ブロック引数 ||
call lexima#add_rule({
      \ 'at': '\({\|\<do\>\)\s*\%#',
      \ 'char': '<Bar>',
      \ 'input': '<Bar>',
      \ 'input_after': '<Bar>',
      \ 'filetype': ['ruby'],
      \ 'mode': 'i',
      \  })

" テンプレート内のスペース
call lexima#add_rule({
      \ 'at':       '<\%#>',
      \ 'char':     '<Space>',
      \ 'input':    '<Space>',
      \ 'input_after':    '<Space>',
      \ 'filetype': ['cpp'],
      \ 'mode': 'i',
      \ })
call lexima#add_rule({
      \ 'at':       '< \%# >',
      \ 'char':     '<BS>',
      \ 'input':    '<BS>',
      \ 'filetype': ['cpp'],
      \ 'delete': 1,
      \ 'mode': 'i',
      \ })
" struct
call lexima#add_rule({
      \ 'at'       : '\%(\<struct\>\|\<class\>\|\<enum\>\)\s*\w\+.*\%#',
      \ 'char'     : '{',
      \ 'input'    : '{',
      \ 'input_after'    : '};',
      \ 'filetype' : ['cpp'],
      \ 'mode': 'i',
      \ })
" http://qiita.com/hatchinee/items/c5bc19a656925ce33882
" classとかの定義時に:までを入れる
call lexima#add_rule({
      \ 'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#',
      \ 'char'     : '(',
      \ 'input'    : '(',
      \ 'input_after': '):',
      \ 'filetype' : ['python'],
      \ 'mode': 'i',
      \ })
" が、すでに:がある場合は重複させない. (smartinputでは、atの定義が長いほど適用の優先度が高くなる)
call lexima#add_rule({
      \ 'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#.*:',
      \ 'char'     : '(',
      \ 'input'    : '(',
      \ 'input_after': ')',
      \ 'filetype' : ['python'],
      \ 'mode': 'i',
      \ })
" 末尾:の手前でも、エンターとか:で次の行にカーソルを移動させる
call lexima#add_rule({
      \ 'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#:$',
      \ 'char'     : ':',
      \ 'input'    : '<CR>',
      \ 'leave' : 1,
      \ 'filetype' : ['python'],
      \ 'mode': 'i',
      \ })
call lexima#add_rule({
      \ 'at'       : '^\s*\%(\<def\>\|\<if\>\|\<for\>\|\<while\>\|\<class\>\|\<with\>\)\s*\w\+.*\%#:$',
      \ 'char'     : '<CR>',
      \ 'input'    : '<CR>',
      \ 'leave' : 1,
      \ 'filetype' : ['python'],
      \ 'mode': 'i',
      \ })

'''

# =======================================================
[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

# =======================================================
[[plugins]]
repo = 'tpope/vim-repeat'
hook_add = '''
nnoremap <silent> dp dp:silent! call repeat#set('dp', 1)<Enter>
nnoremap <silent> do do:silent! call repeat#set('do', 1)<Enter>
'''
# =======================================================
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#window_selector_use_popup = 1
let g:fern#default_hidden = 1
let g:fern#default_exclude = '\.git$\|\.DS_Store'

nnoremap <Leader>f <Cmd>Fern . -drawer<CR>
nnoremap <Leader>F <Cmd>Fern %:p:h -drawer<CR>

function! s:init_fern() abort
  " Use 'select' instead of 'edit' for default 'open' action
  nnoremap <buffer> q <Cmd>q<CR>
  " nnoremap <buffer> q <Cmd>q<CR>
  nnoremap <buffer> H <Cmd>execute 'Fern' fnamemodify(b:fern['root']['_path'], ':h')<CR>
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''
[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'
[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

# =======================================================
[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
nmap ss <Plug>Yssurround
" nmap ss <Plug>Ysurround
imap <C-g>y <Esc><Plug>Yssurround

nmap si :Qsurround Yss<CR>
vmap W :Qsurround VS<CR>
command! -nargs=1 -range Qsurround call s:qsurround.exec(<q-args>)
command! -nargs=1 QsurroundSet call s:qsurround.set(<q-args>)
command! -range QsurroundRangeSet call s:qsurround.rangeset(<count>, <line1>, <line2>, <q-args>)
let s:qsurround = {'data': ['', ''], 'pending':''}

function! s:qsurround.rangeset(count, l1, l2, text)
  let strs = a:count == 0 ? split(a:text, "\n") : getline(a:l1, a:l2)
  if len(strs) == 1
    let strs = [s, '']
  elseif len(strs) > 2
    let s = remove(strs, 0)
    let strs = [s,  join(strs, "\n")]
endif
let self.data = strs
endfunction

function! s:qsurround.set(s)
  if !empty(self.pending)
    let self.data = [self.pending, a:s]
    let self.pending = ''
  else
    let self.pending = a:s
endif
endfunction

function! s:qsurround.exec(mode)
  call self.surround(a:mode, self.data[0], self.data[1])
endfunction

function! s:qsurround.surround(mode, head, tail)
  " if exists("b:surround_".char2nr('Z'))
  "   let org = b:surrond_{char2nr('Z')}
  " else
  "   let org = ''
  " endif
  if !exists('b:surround_objects')
    let b:surround_objects = {}
endif
let org = get(b:surround_objects, 'Z', '')
let b:surround_objects.Z = a:head . "\n\r\n" . a:tail

let char = tolower(a:mode[0:0])
let op = ""
if char == "v"
  let op = "gv"
  endif
  execute "normal " . op . "\<Plug>" . a:mode . "urroundZ"

  if !empty(org)
    let b:surround_objects['Z'] = org
  " let b:surrond_{char2nr('Z')} = org
  else
    unlet b:surround_objects['Z']
    " unlet b:surrond_{char2nr('Z')}
endif
endfunction

'''
# =======================================================
[[plugins]]
repo = 't9md/vim-surround_custom_mapping'
on_map = '<Plug>'
hook_add = '''
let g:surround_custom_mapping = {}
let g:surround_custom_mapping._ = {
      \ "\<CR>" : "\n\r\n",
      \ 'g':  "_('\r')",
      \ 'G':  "_(\"\r\")",
      \ '!':  "<!-- \r -->",
      \ }
let g:surround_custom_mapping.html = {
      \ '1':  "<h1>\r</h1>",
      \ '2':  "<h2>\r</h2>",
      \ '3':  "<h3>\r</h3>",
      \ '4':  "<h4>\r</h4>",
      \ '5':  "<h5>\r</h5>",
      \ '6':  "<h6>\r</h6>",
      \ 'p':  "<p>\r</p>",
      \ 'u':  "<ul>\r</ul>",
      \ 'o':  "<ol>\r</ol>",
      \ 'l':  "<li>\r</li>",
      \ 'a':  "<a href=\"\">\r</a>",
      \ 'A':  "<a href=\"\r\"></a>",
      \ 'i':  "<img src=\"\r\" alt=\"\" />",
      \ 'I':  "<img src=\"\" alt=\"\r\" />",
      \ 'd':  "<div>\r</div>",
      \ 'D':  "<div class=\"selection\">\r</div>",
      \ '!':  "<!-- \r -->",
      \ '?':  "<?php \r ?>",
      \ '%':  "<?php \r ?>",
      \ '#':  "<?php # \r ?>",
      \ '/':  "<?php // \r ?>",
      \ '=':  "<?php echo \r ?>",
      \ '8':  "(( \r ))",
      \ '9':  "(( \r ))",
      \ '(':  "(( \r ))",
      \ ')':  "(( \r ))",
      \ '{':  "{{ \r }}",
      \ '}':  "{{ \r }}",
      \ }
let g:surround_custom_mapping.help = {
      \ 'p':  "> \r <",
      \ }
let g:surround_custom_mapping.ruby = {
      \ '-':  "<% \r %>",
      \ '=':  "<%= \r %>",
      \ '9':  "(\r)",
      \ '5':  "%(\r)",
      \ '%':  "%(\r)",
      \ 'w':  "%w(\r)",
      \ '#':  "#{\r}",
      \ '3':  "#{\r}",
      \ 'e':  "begin \r end",
      \ 'E':  "<<EOS \r EOS",
      \ 'i':  "if \1if\1 \r end",
      \ 'u':  "unless \1unless\1 \r end",
      \ 'c':  "class \1class\1 \r end",
      \ 'm':  "module \1module\1 \r end",
      \ 'd':  "def \1def\1\2args\r..*\r(&)\2 \r end",
      \ 'p':  "\1method\1 do \2args\r..*\r|&| \2\r end",
      \ 'P':  "\1method\1 {\2args\r..*\r|&|\2 \r }",
      \ }
let g:surround_custom_mapping.eruby = {
      \ '-':  "<% \r %>",
      \ '=':  "<%= \r %>",
      \ '#':  "<%# \r %>",
      \ 'h':  "<%= h \r %>",
      \ 'e':  "<% \r %>\n<% end %>",
      \ '%':  "<% \r %>",
      \ }
let g:surround_custom_mapping.markdown = {
      \ 'h': "`\r`",
      \ 'c': "```\n\r\n```",
      \ '!':  "<!-- \r -->",
      \ }
let g:surround_custom_mapping.php = {
      \ '-':  "<?php \r ?>",
      \ '?':  "<?php \r ?>",
      \ '=':  "<?php echo \r ?>",
      \ 'h':  "<?php echo h( \r ); ?>",
      \ 'e':  "<?php echo \r ?>",
      \ 'f':  "<?php foreach ($\r as $val): ?>\n<?php endforeach; ?>",
      \ '%':  "<?php \r ?>",
      \ '#':  "<?php # \r ?>",
      \ '/':  "<?php // \r ?>",
      \ 'v':  "var_dump(\r);",
      \ 'p':  "print_r(\r);",
      \ }
let g:surround_custom_mapping.javascript = {
      \ 'f':  "function(){ \r }"
      \ }
let g:surround_custom_mapping.coffee = {
      \ '-':  "<% \r %>",
      \ '=':  "<%= \r %>",
      \ '9':  "(\r)",
      \ 'r':  "///\r///",
      \ '#':  "#{\r}",
      \ '3':  "#{\r}",
      \ 'e':  "begin \r end",
      \ 'E':  '""" \r """',
      \ 'i':  "if \1if\1 \r",
      \ 'u':  "unless \1unless\1 \r",
      \ 'c':  "class \1class\1 \r",
      \ }
let g:surround_custom_mapping.lua = {
      \ 'f':  "function(){ \r }"
      \ }
let g:surround_custom_mapping.python = {
      \ 'p':  "print( \r)",
      \ '[':  "[\r]",
      \ }
let g:surround_custom_mapping.vim = {
      \'f':  "function! \r endfunction"
      \ }
let g:surround_custom_mapping.twig = {
      \ '8':  "(( \r ))",
      \ '9':  "(( \r ))",
      \ '(':  "(( \r ))",
      \ ')':  "(( \r ))",
      \ '{':  "{{ \r }}",
      \ '}':  "{{ \r }}",
      \ '%':  "{% \r %}",
      \ '#':  "{# \r #}",
      \ '/':  "{# \r #}",
      \ }
function! s:_copy_surround_mapping(from, to)
  if exists('g:surround_custom_mapping[a:from]')
    let g:surround_custom_mapping[a:to] = g:surround_custom_mapping[a:from]
endif
endfunction
function! s:copy_surround_mapping(copies)
  call map(a:copies, 's:_copy_surround_mapping(v:val[0], v:val[1])')
endfunction
call s:copy_surround_mapping([
      \ ['twig', 'html.twig'],
      \ ['ruby', 'ruby.rspec'],
      \ ['python', 'python.nosetests'],
      \ ['perl', 'perl.prove'],
      \ ])
'''

# =======================================================
[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = '<Plug>'
hook_add = '''
nmap <silent> ,w <Plug>CamelCaseMotion_w
nmap <silent> ,e <Plug>CamelCaseMotion_e
nmap <silent> ,b <Plug>CamelCaseMotion_b
vmap <silent> ,w <Plug>CamelCaseMotion_w
vmap <silent> ,e <Plug>CamelCaseMotion_e
vmap <silent> ,b <Plug>CamelCaseMotion_b

omap <silent> i,w <Plug>CamelCaseMotion_iw
xmap <silent> i,w <Plug>CamelCaseMotion_iw
omap <silent> i,b <Plug>CamelCaseMotion_ib
xmap <silent> i,b <Plug>CamelCaseMotion_ib
omap <silent> i,e <Plug>CamelCaseMotion_ie
xmap <silent> i,e <Plug>CamelCaseMotion_ie
'''
# =======================================================
[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
hook_add = '''
let g:splitjoin_split_mapping = 'gS'
let g:splitjoin_join_mapping = 'gJ'
let g:splitjoin_normalize_whitespace = 1
let g:splitjoin_align = 1

" nmap ,j :<C-u>SplitjoinSplit<CR>
" nmap ,k :<C-u>SplitjoinJoin<CR>

'''

# =======================================================
[[plugins]]
repo = 'AndrewRadev/inline_edit.vim'
on_cmd = [ 'InlineEdit' ]
hook_add = '''
let g:inline_edit_autowrite = 1
let g:inline_edit_patterns = [
      \ {
      \ 'main_filetype': '*html',
      \ 'sub_filetype': 'handlebars',
      \ 'indent_adjustment': 1,
      \ 'start': '<script\>[^>]*type="text/template"[^>]*>',
      \ 'end': '</script>',
      \ }
      \ ]
nnoremap <Leader>i :<C-u>InlineEdit<CR>
'''

# =======================================================
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffReset']

# =======================================================
[[plugins]]
repo = 'drmingdrmer/vim-toggle-quickfix'

# =======================================================
[[plugins]]
repo = 'zdcthomas/medit'

# =======================================================
[[plugins]]
repo = 'kana/vim-smartword'
on_map = '<Plug>'
hook_add = '''
nmap w  <Plug>(smartword-w)
nmap b  <Plug>(smartword-b)
nmap e  <Plug>(smartword-e)
nmap ge <Plug>(smartword-ge)
vmap w  <Plug>(smartword-w)
vmap b  <Plug>(smartword-b)
vmap e  <Plug>(smartword-e)
vmap ge <Plug>(smartword-ge)
'''
# =======================================================
[[plugins]]
repo = 'thinca/vim-qfreplace'

# =======================================================
[[plugins]]
repo = 'thinca/vim-localrc'
hook_add = '''
let g:localrc_filename = '.vimrc_local.vim'
if has('vim_starting')
  " http://vim-users.jp/2009/12/hack112/ => vimrc-local
  call localrc#load('vimrc_local.vim', getcwd(), 3)
  call localrc#load(g:localrc_filename, getcwd(), 3)
  endif
  function! s:edit_vimrc_local()
    let fpath = s:find_proj_dir() . "/" .g:localrc_filename
    if !filereadable(fpath)
      let fpath = input( g:localrc_filename . " :", fpath)
  endif
  if !empty(fpath)
    execute "edit" "+split" fpath
  endif
endfunction
command! VimrcLocalEdit call s:edit_vimrc_local()
'''

# =======================================================
[[plugins]]
repo = 'thinca/vim-ambicmd'
hook_add = '''
function! s:ambicmd_expand(key, mode, line)
  " give priority to altercmd.vim
  if hasmapto(a:line, a:mode, 1)
    return a:key
  endif
  return ambicmd#expand(a:key)
endfunction

cmap <expr> <Space> <SID>ambicmd_expand("\<Space>", "c", getcmdline())
cmap <expr> <CR> <SID>ambicmd_expand("\<CR>", "c", getcmdline())
'''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
  let g:template_basedir = expand('$HOME/.vim')
  let g:template_files = 'template/**'
  let g:template_free_pattern = 'template'

  " s: が使えない…
  function! VimrcTemplateReplaceKeywords()
    silent! %s/<+FILENAME_NOEXTUC+>/\=toupper(expand('%:t:r'))/g
    silent! %s/<+FILENAME_NOEXT+>/\=expand('%:t:r')/g
    silent! %s/<+FILENAME+>/\=expand('%:t')/g
    silent! %s/<+EMAIL+>/\=g:email/g
    silent! %s/<+AUTHOR+>/\=g:author/g
    silent! %s/<+HOMEPAGE_URL+>/\=g:homepage_url/g
    silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
    silent! execute "normal! gg"
    "" expand eval
    %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge

    if search('<+CURSOR+>')
      silent! execute 'normal! "_da>'
    endif
  endfunction
  for v in ['email', 'author', 'homepage_url']
    if exists('g:'.v)
	  execute 'let' 'g:'.v '=""'
	endif
  endfor

  "autocmd BufNewFile * execute 'TemplateLoad'
  MyAutoCmd User plugin-template-loaded call VimrcTemplateReplaceKeywords()
'''
[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
  let g:sonictemplate_vim_template_dir = expand('$HOME/.vim/sonictemplate/')
  Alias SonicTemplate Template
  Alias ST Template

  " nmap <C-y><C-t> <Plug>(sonictemplate)
  " imap <C-y><C-t> <Plug>(sonictemplate)
  " TODO: implements
  " nmap <C-y><C-t> :<C-u>Unite sonictemplate<CR>
  " imap <C-y><C-t> <ESC>:<C-u>Unite sonictemplate<CR>
  " let g:sonictemplate_key='\<Nop>'
  " nmap <C-y>t :<C-u>Unite sonictemplate<CR>
  " imap <C-y>t <ESC>:<C-u>Unite sonictemplate<CR>
'''

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
let test#strategy = has('neovim')?'neovim': 'vimterminal'
" nmap <silent> <leader>t :TestNearest<CR>
" nmap <silent> <leader>T :TestFile<CR>
" nmap <silent> <leader>a :TestSuite<CR>
" nmap <silent> <leader>l :TestLast<CR>
" nmap <silent> <leader>g :TestVisit<CR>
'''
[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertEnter'
on_ft = 'snippet'
hook_add = '''
  let g:neosnippet#snippets_directory            = $HOME . '/.vim/snippets'
  let g:neosnippet#enable_snipmate_compatibility = 0
  " let g:neosnippet#disable_runtime_snippets._    = 1

  imap <C-l> <Plug>(neosnippet_jump_or_expand)
  smap <C-l> <Plug>(neosnippet_jump_or_expand)
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_func = ['OpenBrowser']
on_cmd = [ 'OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
on_map = '<Plug>'
hook_add = '''
  nmap [!space]u <Plug>(openbrowser-open)
  vmap [!space]u <Plug>(openbrowser-open)
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq']
[[plugins]]
repo = 'mattn/webapi-vim'
[[plugins]]
repo = 'mattn/gist-vim'
on_cmd = ['Gist']

# gf-user {{{1
[[plugins]]
repo = 'kana/vim-gf-user'
[[plugins]]
repo = 'kana/vim-gf-diff'
[[plugins]]
repo = 'sgur/vim-gf-autoload'
[[plugins]]
repo = 'zhaocai/vim-gf-python'
on_ft = 'python'
[[plugins]]
repo = 'pekepeke/vim-gf-ruby-require'
on_ft = 'ruby'
[[plugins]]
repo = 'pekepeke/vim-gf-vundle'

# operator {{{1
[[plugins]]
repo = 'kana/vim-operator-user'
hook_add = '''
    call operator#user#define('excelize', 'OperatorExcelize')
    function! OperatorExcelize(motion_wise)
      let b = line("'[")
      let e = line("']")
      execute b ',' e 'substitute/\v(\''?)(\$?\u+\$?\d+)(\''?)/\1" \& \2 \& "\3/g'
      execute b 'substitute/^/="/'
      execute e 'substitute/$/"/'
    endfunction

    call operator#user#define_ex_command('retab', 'retab')
    call operator#user#define_ex_command('join', 'join')
    call operator#user#define_ex_command('uniq', 'sort u')
    call operator#user#define_ex_command('trimright', 's/\s\+$//')

  map H <Plug>(operator-furround-append-reg)
  map _ <Plug>(operator-replace)
  map ;e <Plug>(operator-excelize)
  map ;h <Plug>(operator-html-escape)
  map ;H <Plug>(operator-html-unescape)
  map ;c <Plug>(operator-camelize)
  map ;C <Plug>(operator-decamelize)
  map ;<C-i> <Plug>(operator-retab)
  map ;j <Plug>(operator-join)
  map ;u <Plug>(operator-uniq)
  map ;k <Plug>(operator-trimright)

  " map ;q <Plug>(operator-quickhl-manual-this-motion)
  map ;u <Plug>(operator-openbrowser)

  map <Leader>tm <Plug>(operator-tabular-tsv2md))
  map <Leader>Tm <Plug>(operator-tabular-md2tsv)
  map <Leader>nm <Plug>(operator-normalize_utf8mac)
  map ;s <Plug>(operator-shuffle)
'''
[[plugins]]
repo = 'kana/vim-operator-replace'
# \ 'on_map' : [
# \ ['nx', '<Plug>(operator-replace)']]
# \ }
[[plugins]]
repo = 'tyru/operator-camelize.vim'
on_map = '<Plug>'
[[plugins]]
repo = 'tyru/operator-html-escape.vim'
on_map = '<Plug>'
[[plugins]]
repo = 'syngan/vim-operator-furround'
on_map = '<Plug>'
[[plugins]]
repo = 'rhysd/vim-operator-surround'
on_map = '<Plug>'
hook_add = '''
    map <silent>sa <Plug>(operator-surround-append)
    map <silent>sd <Plug>(operator-surround-delete)
    map <silent>sr <Plug>(operator-surround-replace)
    nmap <silent>saa <Plug>(operator-surround-append)<Plug>(textobj-multiblock-a)
    nmap <silent>sdd <Plug>(perator-surround-delete)<Plug>(textobj-multiblock-a)
    nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
    nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
    nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)

'''
[[plugins]]
repo = 'sgur/vim-operator-openbrowser'
on_map = '<Plug>'
[[plugins]]
repo = 'pekepeke/vim-operator-shuffle'
on_map = '<Plug>'
[[plugins]]
repo = 'pekepeke/vim-operator-tabular'
on_map = '<Plug>'
[[plugins]]
repo = 'pekepeke/vim-operator-normalize-utf8mac'
on_map = '<Plug>'

# textobj {{{1
[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
  function! s:textobj_mapping(key, cmd)
    silent exe 'omap' a:key a:cmd
    silent exe 'vmap' a:key a:cmd
    " silent exe 'xmap' a:key a:cmd
    " silent exe 'smap' a:key a:cmd
  endfunction
  command! -nargs=+ Tmap call s:textobj_mapping(<f-args>)
  function! s:textobj_mapping_by_name(key, name)
    call s:textobj_mapping('i'.a:key, '<Plug>(textobj-' . a:name . '-i)')
    call s:textobj_mapping('a'.a:key, '<Plug>(textobj-' . a:name . '-a)')
  endfunction
  command! -nargs=+ TTmap call s:textobj_mapping_by_name(<f-args>)

  Tmap if <Plug>(textobj-function-i)
  Tmap af <Plug>(textobj-function-a)
  Tmap ii <Plug>(textobj-indent-i)
  Tmap ai <Plug>(textobj-indent-a)

  " Tmap a/ <Plug>(textobj-lastpat-n)
  " Tmap i/ <Plug>(textobj-lastpat-n)
  " Tmap a? <Plug>(textobj-lastpat-N)
  " Tmap i? <Plug>(textobj-lastpat-N)

  TTmap e entire
  nnoremap <silent> yie :<C-u>call <SID>execute_motionless("normal y\<Plug>(textobj-entire-i)")<CR>
  nnoremap <silent> yae :<C-u>call <SID>execute_motionless("normal y\<Plug>(textobj-entire-a)")<CR>
  TTmap y syntax
  TTmap ,_ quoted
  TTmap f function

  " TTmap e entire
  TTmap ,, parameter
  " TTmap l line
  TTmap ,b between
  TTmap ,f fold
  TTmap q enclosedsyntax
  " TTmap b multiblock
  TTmap b multitextobj
  TTmap ,w wiw
  TTmap u lastinserted
  TTmap U url
  TTmap # ifdef
  Tmap ixx <Plug>(textobj-context-i)

  " Tmap axa <Plug>(textobj-xmlattribute-xmlattribute)
  " Tmap ixa <Plug>(textobj-xmlattribute-xmlattributenospace)
  " TTmap m  motionmotion

  TTmap P php-phptag
  TTmap aP php-phparray

  TTmap c wordcolumn-w
  TTmap C wordcolumn-W

  " let g:textboj_ _no_default_key_mappings=1
  " let g:textboj_datetime_no_default_key_mappings=1
  " let g:textboj_jabraces_no_default_key_mappings=1

  let g:textboj_syntax_no_default_key_mappings=1
  let g:textboj_quoted_no_default_key_mappings=1
  let g:textboj_function_no_default_key_mappings=1

  " let g:textobj_entire_no_default_key_mappings=1
  let g:textobj_parameter_no_default_key_mappings=1
  " let g:textobj_line_no_default_key_mappings=1
  let g:textobj_between_no_default_key_mappings=1
  let g:textboj_fold_no_default_key_mappings=1
  let g:textboj_enclosedsyntax_no_default_key_mappings=1
  let g:textboj_multiblock_no_default_key_mappings=1
  let g:textobj_wiw_no_default_key_mappings=1
  let g:textboj_lastinserted_no_default_key_mappings=1
  let g:textboj_url_no_default_key_mappings=1
  let g:textboj_ifdef_no_default_key_mappings=1
  let g:textboj_context_no_default_key_mappings=1
  " let g:textboj_xbrackets_no_default_key_mappings=1
  let g:textboj_php_no_default_key_mappings=1
  let g:textobj_wordcolumn_no_default_key_mappings=1

  let g:textobj_multiblock_blocks = [
  \ [ '(', ')' ],
  \ [ '[', ']' ],
  \ [ '{', '}' ],
  \ [ '<', '>', 1 ],
  \ [ '"', '"', 1 ],
  \ [ "'", "'", 1 ],
  \ [ "_", "_", 1 ],
  \]

  let g:textobj_multitextobj_textobjects_i = [
  \ "\<Plug>(textobj-url-i)",
  \ "\<Plug>(textobj-php-i)",
  \ "\<Plug>(textobj-parameter-i)",
  \ "\<Plug>(textobj-multiblock-i)",
  \ "\<Plug>(textobj-function-i)",
  \ "\<Plug>(textobj-indent-i)",
  \]
  " \ "\<Plug>(textobj-entire-i)",

  let g:textobj_multitextobj_textobjects_a = [
  \ "\<Plug>(textobj-url-a)",
  \ "\<Plug>(textobj-php-a)",
  \ "\<Plug>(textobj-parameter-a)",
  \ "\<Plug>(textobj-multiblock-a)",
  \ "\<Plug>(textobj-function-a)",
  \ "\<Plug>(textobj-indent-a)",
  \]
  " \ "\<Plug>(textobj-entire-a)",

  let g:textobj_multitextobj_textobjects_group_i = {
  \ "A" : [
  \   "\<Plug>(textobj-url-i)",
  \   "\<Plug>(textobj-wiw-i)",
  \   "iw",
  \ ]
  \}
'''
# repo = 'kana/vim-textobj-datetime'
# \ 'on_map': [[
# \ 'ada', 'adf', 'add', 'adt', 'adz',
# \ 'ida', 'idf', 'idd', 'idt', 'idz',
# \ ]],
# \ }
[[plugins]]
repo = 'kana/vim-textobj-diff'
# on_map = '<Leader>d'
[[plugins]]
repo = 'kana/vim-textobj-entire'
on_map = '<Plug>'
# on_map = ['ie', 'ae']
[[plugins]]
repo = 'kana/vim-textobj-fold'
on_map = '<Plug>'
[[plugins]]
repo = 'kana/vim-textobj-lastpat'
# on_map = ['a/', 'i/', 'a?', 'i?', '<Plug>' ]
[[plugins]]
repo = 'kana/vim-textobj-syntax'
# on_map = ['al', 'il', '<Plug>']
on_map = '<Plug>'
[[plugins]]
repo = 'kana/vim-textobj-underscore'
on_map = '<Plug>'
[[plugins]]
repo = 'thinca/vim-textobj-between'
on_map = '<Plug>'
# repo = 'thinca/vim-textobj-comment'
[[plugins]]
repo = 'kana/vim-textobj-function'
on_map = '<Plug>'
[[plugins]]
repo = 'thinca/vim-textobj-function-javascript'
[[plugins]]
repo = 'thinca/vim-textobj-function-perl'
[[plugins]]
repo = 't9md/vim-textobj-function-ruby'
[[plugins]]
repo = 'nelstrom/vim-textobj-rubyblock'
on_map = '<Plug>'
[[plugins]]
repo = 'deris/vim-textobj-enclosedsyntax'
on_map = '<Plug>'
[[plugins]]
repo = "osyo-manga/vim-textobj-multitextobj"
on_map = '<Plug>'
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
on_map = '<Plug>'
[[plugins]]
repo = 'vim-scripts/textobj-indent'
on_map = '<Plug>'
[[plugins]]
repo = 'sgur/vim-textobj-parameter'
on_map = '<Plug>'
# repo = 'h1mesuke/textobj-wiw'
# \ 'depends' : 'vim-textobj-user',
# \ 'on_map' : [
# \ ['nvo', '<Plug>(textobj-wiw-i)', '<Plug>(textobj-wiw-a)']]
# \ }
[[plugins]]
repo = 'rhysd/vim-textobj-word-column'
on_map = '<Plug>'
[[plugins]]
repo = 'rhysd/vim-textobj-continuous-line'
[[plugins]]
repo = 'osyo-manga/vim-textobj-context'
on_map = '<Plug>'
[[plugins]]
repo = "osyo-manga/vim-textobj-blockwise"
[[plugins]]
repo = 'akiyan/vim-textobj-xml-attribute'
on_map = '<Plug>'
# on_map = ['<Plug>', 'axa', 'ixa']
[[plugins]]
repo = 'rhysd/vim-textobj-lastinserted'
on_map = '<Plug>'
[[plugins]]
repo = 'gilligan/textobj-lastpaste'
on_map = '<Plug>'
# on_map = ['<Plug>', 'aip', 'iip']
[[plugins]]
repo = 'mattn/vim-textobj-url'
on_map = '<Plug>'
[[plugins]]
repo = 'anyakichi/vim-textobj-ifdef'
on_map = '<Plug>'
[[plugins]]
repo = 'akiyan/vim-textobj-php'
on_map = '<Plug>'
# others {{{1
[[plugins]]
repo = 'pekepeke/vim-trimr'
hook_add = '''
let g:trimr_method = 'ignore_filetype'
let g:trimr_targets = ['markdown', 'mkd', 'textile']
'''
[[plugins]]
repo = 'takavfx/gptwriter.vim'
[[plugins]]
repo = 'ryicoh/deepl.vim'
hook_add = '''
let g:deepl#endpoint = "https://api-free.deepl.com/v2/translate"
" let g:deepl#auth_key = "00000000-0000-0000-0000-000000000000:fx" " or readfile(expand('~/.config/deepl.auth_key'))[0]

" replace a visual selection
command! -range -nargs=0 DeeplEN call deepl#v("EN")
command! -range -nargs=0 DeeplJA call deepl#v("JA")
command! -range -nargs=* Deepl call deepl#v(<f-args>)
'''
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''
[[plugins]]
repo = 'madox2/vim-ai'
hook_add = '''
" let g:vim_ai_token_file_path = '~/.config/openai.token'
'''
[[plugins]]
repo = 'lambdalisue/vim-gin'
hook_add = '''

'''
