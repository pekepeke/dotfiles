# vim:fdm=marker sw=2 ts=2 ft=toml expandtab:
# completion
[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
call ddc#custom#patch_global('sources', [
\ 'lsp',
\ 'tabnine',
\ 'around',
\ 'file',
\ 'buffer',
\ 'dictionary',
\ 'ale',
\ 'omni',
\ ])
"\ 'cmdline', 'cmdline-history', 'shell-native',
call ddc#custom#patch_filetype(['vim', 'toml'], 'sources', ['necovim'])

"     \   'matchers': ['matcher_head'],
"     \   'sorters': ['sorter_rank']
call ddc#custom#patch_global('ui', 'pum')
call ddc#custom#patch_global('sourceOptions', {
  \ '_': #{
  \     matchers: ['matcher_fuzzy'],
  \     sorters: ['sorter_fuzzy', 'sorter_rank'],
  \     converters: ['converter_fuzzy', 'converter_remove_overlap'],
  \ },
  \ 'necovim': {'mark': 'VIM'},
  \ 'buffer': {'mark': 'B'},
  \ 'dictionary': {'mark': 'D'},
  \ 'file': {
  \   'mark': 'F',
  \   'isVolatile': v:true,
  \   'forceCompletionPattern': '\S/\S*',
  \ },
  \ 'lsp': #{
  \   mark: 'LSP',
  \   forceCompletionPattern: '\.\w*|:\w*|->\w*',
  \   sorters: ['sorter_lsp-kind'],
  \ },
  \ 'omni': #{ mark: 'O' },
  \ 'around': #{ mark: 'A' },
  \ 'tabnine': #{
  \   mark: 'TN',
  \   maxItems: 5,
  \   isVolatile: v:true,
  \ },
  \ 'cmdline': #{ mark: 'cmdline'},
  \ 'cmdline-history': #{ mark: 'history' },
  \ 'shell-native': #{ mark: 'zsh' },
  \ })
let dict_paths = filter([
  \   '/usr/share/dict/american-english',
  \   '/usr/share/dict/words',
  \   $HOME.'/.local/share/dict/words',
  \ ], 'file_readable(v:val)')
call ddc#custom#patch_global('sourceParams', #{
  \ lsp: #{
  \     snippetEngine: denops#callback#register({
  \           body -> neosnippet#anonymous(body)
  \     }),
  \   enableResolveItem: v:true,
  \   enableAdditionalTextEdit: v:true,
  \   lspEngine: 'vim-lsp',
  \ },
  \ buffer: {
  \   'requireSameFiletype': v:false,
  \   'limitBytes': 5000000,
  \   'fromAltBuf': v:true,
  \   'forceCollect': v:true,
  \ },
  \ dictionary: {
  \   'dictPaths': dict_paths,
  \   'smartCase': v:true,
  \   'isVolatile': v:true,
  \ },
  \ ale: {'cleanResultsWhitespace': v:false},
  \ tabnine: #{
  \   maxNumResults: 10,
  \ },
  \ around: #{ maxSize: 500 },
  \ shell-native: #{ shell: 'zsh' },
  \ })
call ddc#enable()
'''
[[plugins]]
repo = 'Shougo/deol.nvim'
[[plugins]]
repo = 'Shougo/ddc-ui-native'
hook_add = '''
" call ddc#custom#patch_global('ui', 'native')
'''
[[plugins]]
repo = 'Shougo/ddc-ui-pum'
[[plugins]]
repo = 'Shougo/pum.vim'
hook_add = '''
function! s:input_tab()
  if d#is_installed('neosnippet.vim') && &filetype != 'snippet'
    if neosnippet#expandable()
      return "\<Plug>(neosnippet_expand)"
    elseif neosnippet#jumpable()
      return "\<Plug>(neosnippet_jump)"
  endif
  endif
  if pumvisible()
    return "\<C-n>"
    " return '<Cmd>call pum#map#insert_relative(+1)<CR>'
  endif

  " space, bracket 飛ばす
  let line = getline(".")
  let pos = col(".") - 1

  let org_pos = pos
  while (line[pos] == " ")
    let pos = pos + 1
  endwhile
  let ch = line[pos]
  if index([ "]", "}", ")", "'", '"', ">", "|" , ","], ch) != -1
    while (line[pos+1] == " ")
      let pos = pos+1
    endwhile
    return repeat("\<Right>", pos - org_pos + 1)
  endif

  if d#is_installed('emmet-vim')
    \ && len(matchstr(&filetype, 'x\?html\|s\?css\|php\|eruby\|typescript')) > 0
    \ && emmet#isExpandable()
    \ && len(matchstr(getline('.'), '^\(\w*\%'.col('.').'c\)')) > 0
    return "\<Plug>(emmet-expand-abbr)"
  endif

  if (col('.') <= 1 || getline('.')[col('.') - 2] =~# '\s')
    return "\<TAB>"
  endif
  return ddc#map#manual_complete()
endfunction

" inoremap <silent><expr> <TAB>
"       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
"       \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
"       \ '<TAB>' : ddc#map#manual_complete()
inoremap <silent><expr> <TAB> <SID>input_tab()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-y><C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-y>y   <Cmd>call pum#map#confirm()<CR>
inoremap <C-j>   <Cmd>call pum#map#confirm()<CR><CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
" call ddc#custom#patch_global(#{
"         \   ui: 'pum',
"         \   autoCompleteEvents: [
"         \     'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged',
"         \   ],
"         \   cmdlineSources: {
"         \     ':': ['cmdline', 'cmdline-history', 'shell-native', 'around'],
"         \   },
"         \ })
" nnoremap :       <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()

  " Enable command line completion for the buffer
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>
endfunction
'''
[[plugins]]
repo = 'tani/ddc-fuzzy'
hook_add = '''
'''
[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
[[plugins]]
repo = 'Shougo/ddc-source-lsp'
[[plugins]]
repo='Shougo/neco-vim'
[[plugins]]
repo = 'matsui54/ddc-source-buffer'

[[plugins]]
repo = 'matsui54/ddc-source-dictionary'
hook_add = '''
if empty(&dictionary) | setlocal dictionary+=/usr/share/dict/words | endif
'''
[[plugins]]
repo = 'LumaKernel/ddc-source-file'
hook_add = '''
call ddc#custom#patch_filetype(
  \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
  \ 'sourceOptions': {
  \   'file': {
  \     'forceCompletionPattern': '\S\\\S*',
  \   },
  \ },
  \ 'sourceParams': {
  \   'file': {
  \     'mode': 'win32',
  \   },
  \ }})
'''
[[plugins]]
repo = 'statiolake/ddc-ale'
hook_add = '''

" Option: cleanResultsWhitespace
'''

[[plugins]]
repo = 'Shougo/ddc-source-omni'
hook_add = '''
" Example: Use vimtex
"call vimtex#init()
"call ddc#custom#patch_filetype(['tex'], 'sourceOptions', #{
"      \   'omni': #{
"      \     'forceCompletionPattern': g:vimtex#re#deoplete,
"      \   },
"      \ })
"call ddc#custom#patch_filetype(['tex'], 'sourceParams', #{
"      \   'omni': #{ 'omnifunc': 'vimtex#complete#omnifunc' },
"      \ })
'''

[[plugins]]
repo = 'Shougo/ddc-source-around'
[[plugins]]
repo = 'Shougo/ddc-source-shell-native'
[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  " nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
  " nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

  let g:lsp_diagnostics_enabled = 0
  let g:lsp_diagnostics_signs_enabled = 0
  let g:lsp_document_highlight_enabled = 0
  let g:lsp_document_code_action_signs_enabled = 0

  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

  " refer to doc to add more commands
endfunction

augroup vimrc_vim_lsp
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
[[plugins]]
repo = 'rhysd/vim-lsp-ale'
hook_add = '''
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
let g:ddu_source_lsp_clientName = 'vim-lsp'
call ddu#custom#patch_global({
  \   'ui': 'ff',
  \   'sources': [
  \     {'name':'file','params':{}},
  \     {'name':'mr'},
  \     {'name':'register'},
  \     {'name':'buffer'},
  \     {'name':'jumplist'},
  \     {'name':'qf', 'params': #{
  \         what: #{ title: 'qf' },
  \         dup: v:true,
  \       },
  \     },
  \     {'name':'help'},
  \     {'name':'file_old'},
  \     {'name':'make'},
  \     {'name':'colorscheme'},
  \     {'name':'lsp_definition'},
  \     {'name':'lsp_references'},
  \     {'name':'lsp_documentSymbol'},
  \     {'name':'lsp_workspaceSymbol'},
  \     {'name':'lsp_callHierarchy'},
  \     {'name':'lsp_typeHierarchy'},
  \     {'name':'lsp_codeAction'},
  \     {'name':'lsp_diagnostic'},
  \     {'name':'custom-list'},
  \   ],
  \   'sourceOptions': {
  \     '_': #{
  \       matchers: ['matcher_substring'],
  \     },
  \   },
  \   'kindOptions': {
  \     'file': {
  \       'defaultAction': 'open',
  \     },
  \     'word': {
  \        'defaultAction': 'append',
  \     },
  \     'help': {
  \        'defaultAction': 'open',
  \     },
  \     'colorscheme': {
  \        'defaultAction': 'set',
  \     },
  \     'lsp': {
  \        'defaultAction': 'open',
  \     },
  \     'lsp_codeAction': {
  \        'defaultAction': 'apply',
  \     },
  \     'custom-list': {
  \        'defaultAction': 'callback',
  \     },
  \   },
  \   'uiParams': {
  \      'ff': {
  \         'startFilter': v:false,
  \      },
  \   },
  \   'filterParams': {
  \      'matcher_substring': {
  \          'highlightMatched': 'Search',
  \      },
  \   },
  \ })

let s:fd_bin = executable('fdfind') ? 'fdfind' : 'fd'

call ddu#custom#alias('default', 'source', 'directory_rec', 'file_external')
call ddu#custom#patch_global('sourceParams', {
   \   'directory_rec': {
   \     'cmd': [s:fd_bin, '.', '-H', '-t', 'd']
   \   },
   \ })
unlet s:fd_bin

call ddu#custom#patch_local('file_rec', {
\ 'sources': [{
\   'name':'file_rec',
\   'params': {
\     'ignoredDirectories': ['.git', 'var', 'node_modules', ]
\   },
\ }],
\})
call ddu#custom#patch_local('filer', {
\ 'ui': 'filer',
\ 'sources': [
\   {'name': 'file', 'params': {}},
\ ],
\   'sourceOptions': {
\     '_': {
\       'columns': ['filename'],
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   },
\   'uiParams': {
\     'filer': {
\       'winWidth': 40,
\       'split': 'vertical',
\       'splitDirection': 'topleft',
\     }
\   },
\ 'resume': v:true,
\ })

call ddu#custom#patch_local('grep', {
    \ 'sourceParams' : {
    \    'rg' : {
    \      'args': ['--column', '--no-heading', '--color', 'never', '-i'],
    \    },
    \  },
    \ 'uiParams': {
    \   'ff': {
    \     'startFilter': v:false,
    \   },
    \ },
    \ 'resume': v:true,
    \ })
call ddu#custom#patch_local('vim_type', {'ui': 'ff',
    \ 'sources': [
    \ {'name': 'vim_variable', 'params': {'bufnr': bufnr('%')}},
    \ {'name': 'vim_option', 'params': {'bufnr': bufnr('%')}},
    \ {'name': 'vim_function', 'params': {'bufnr': bufnr('%')}},
    \ {'name': 'vim_command', 'params': {'bufnr': bufnr('%')}},
    \ {'name': 'vim_event', 'params': {'bufnr': bufnr('%')}},
    \ ]})

"ddu-key-setting
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  nnoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>call ddu#ui#do_action('quit')<CR>
  inoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#do_action('itemAction')<CR>
  inoremap <buffer> <C-j>
  \ <Cmd>call cursor(line('.')+1,0)<CR>
  inoremap <buffer> <C-k>
  \ <Cmd>call cursor(line('.')-1,0)<CR>
endfunction


autocmd TabEnter,CursorHold,FocusGained <buffer>
  \ call ddu#ui#do_action('checkItems')

autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
  nnoremap <buffer><silent><expr> <CR>
    \ ddu#ui#get_item()->get('isTree', v:false) ?
    \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow'})<CR>" :
    \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>"

  nnoremap <buffer><silent><expr> <Space>
    \ ddu#ui#get_item()->get('isTree', v:false) ?
    \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow'})<CR>" :
    \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>"
  nnoremap <buffer><silent><expr> l
    \ ddu#ui#get_item()->get('isTree', v:false) ?
    \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow'})<CR>" :
    \ "<Cmd>call ddu#ui#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>"

  nnoremap <buffer><silent> <Esc>
    \ <Cmd>call ddu#ui#do_action('quit')<CR>

  nnoremap <buffer><silent> q
    \ <Cmd>call ddu#ui#do_action('quit')<CR>

  nnoremap <buffer><silent> ..
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>
  nnoremap <buffer><silent> h
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>

  nnoremap <buffer><silent> c
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'copy'})<CR>

  nnoremap <buffer><silent> p
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'paste'})<CR>

  nnoremap <buffer><silent> d
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'delete'})<CR>

  nnoremap <buffer><silent> r
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'rename'})<CR>

  nnoremap <buffer><silent> mv
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'move'})<CR>

  nnoremap <buffer><silent><expr> t
    \ ddu#ui#get_item()->get('isTree', v:false) ?
    \ "<Cmd>call ddu#ui#do_action('expandItem', {'mode': 'toggle'})<CR>" :
    \ "\<Ignore><CR>"

  nnoremap <buffer><silent> mf
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newFile'})<CR>
  nnoremap <buffer><silent> mk
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'newDirectory'})<CR>

  nnoremap <buffer><silent> yy
    \ <Cmd>call ddu#ui#do_action('itemAction', {'name': 'yank'})<CR>

  nnoremap <buffer> >
  \ <Cmd>call ddu#ui#do_action('updateOptions', #{
  \   sourceOptions: #{
  \     _: #{
  \       matchers: s:ddu_filer_toggle_hidden(),
  \     },
  \   },
  \ })<CR>
  \<Cmd>call ddu#ui#do_action('redraw')<CR>

endfunction

function s:ddu_filer_toggle_hidden()
  const current = ddu#custom#get_current(b:ddu_ui_name)
  const source_options = get(current, 'sourceOptions', {})
  const source_options_all = get(source_options, '_', {})
  const matchers = get(source_options_all, 'matchers', [])
  return empty(matchers) ? ['matcher_hidden'] : []
endfunction

function! s:ddu_grep(input, dir)
  call ddu#start(#{
  \   name: 'grep',
  \   sources: [#{
  \     name: 'rg',
  \     params: #{ input: a:input },
  \     options: {'path': a:dir},
  \   }],
  \ })
endfunction

let g:vimrc_ddu_menu_items = #{
  \ vimhelp: [
    \   'help function-list',
    \   'help usr_41',
    \   'help pattern-overview',
    \   'help quickref',
    \   'help option-list',
    \   'help tips',
    \   'help usr_toc',
    \   'help startup-options',
    \   'help windows',
    \   'help tabpage',
    \   'help write-plugin',
    \   'help write-filetype-plugin',
    \   'help help-writing',
  \ ],
  \ }
let g:vimrc_denops_callback_ids = get(g:, 'vimrc_denops_callback_ids', {})

function! s:ddu_custom_list(texts, callback_id)
  call ddu#start(#{sources:[#{
  \    name: 'custom-list',
  \    params: #{
  \      texts: a:texts,
  \      callbackId: a:callback_id,
  \    },
  \  }, ]})
endfunction

function! s:ddu_menu(texts)
  let texts = g:vimrc_ddu_menu_items[a:texts]
  if empty(texts)
    return
  endif
  call s:ddu_custom_list(texts, g:vimrc_denops_callback_ids['cbfn_execute'])
endfunction

function! s:ddu_file_rec(dir)
  call ddu#start(#{
  \   name: 'file_rec',
  \   sources: [#{
  \     name: 'file_rec',
  \     options: #{ path: expand(a:dir) },
  \   }]
  \ })
endfunction

function! s:ddu_lsp(source)
  let keyword = expand('<cword>')
  call ddu#start(#{
  \   name: 'lsp',
  \   sources: [#{
  \     name: a:source,
  \     method: keyword,
  \     query: keyword,
  \   }]
  \ })
endfunction

function! s:cbfn_tagjump(str)
  let matched = matchlist(a:str, '\[.\?\] \(.\+\)  \(.\+\)  \(.\+\)')
  if empty(matched)
  echoerr 'cannot parse string: '.a:str
    return
  endif
  let file = matched[3]
  let cmd = matched[2]
  let cmd = substitute(l:cmd, '/^', '/^\\C', 'g')
  let cmd = substitute(l:cmd,  '\*',  '\\\*', 'g')
  let cmd = substitute(l:cmd,  '\[',  '\\\[', 'g')
  let cmd = substitute(l:cmd,  '\]',  '\\\]', 'g')
  silent execute 'edit' '+'.cmd file
  " echoerr 'edit' '+'.cmd file
endfunction

function! s:cbfn_sonictemplate(template)
  call sonictemplate#apply(a:template, mode())
endfunction

function! s:ddu_grep_dir(dir)
 call s:ddu_grep(input('Keyword: '), expand(a:dir))
endfunction

function s:cbfn_execute(cmd)
  execute a:cmd
endfunction

call extend(g:vimrc_denops_callback_ids, #{
  \ ddu_lsp: denops#callback#register(funcref('s:ddu_lsp'), {}),
  \ cbfn_tagjump: denops#callback#register( funcref('s:cbfn_tagjump'), {}),
  \ ddu_file_rec: denops#callback#register( funcref('s:ddu_file_rec'), {}),
  \ cbfn_sonictemplate: denops#callback#register( funcref('s:cbfn_sonictemplate'), {}),
  \ ddu_grep_dir: denops#callback#register( funcref('s:ddu_grep_dir'), {}),
  \ ddu_menu: denops#callback#register( funcref('s:ddu_menu'), {}),
  \ cbfn_execute:  denops#callback#register( funcref('s:cbfn_execute'), {}),
  \ })

function s:ddu_taglist_immediately()
  let keyword = expand('<cword>')
  let tags = taglist(keyword)
  if len(tags) <= 0
    return
  elseif len(tags) <= 1
    execute 'tag' keyword
    return
  endif
  call s:ddu_custom_list(map(taglist(keyword), { _, v ->
    \   printf('[%s] %s   %s   %s', v.kind, v.name, v.cmd, v.filename)
    \ }), g:vimrc_denops_callback_ids['cbfn_tagjump'])
endfunction

function! DduSourceKeymap()
  " n  j           * v:count == 0 ? 'gj' : 'j'
  " {'lhs': '<C-G>S', 'mode': 'i', 'expr': 0, 'sid': 321, 'lnum': 626, 'noremap': 0, 'nowait': 0, 'rhs': '<Plug>ISurround', 'lhsraw': '<80><fc>^DGS', 'abbr': 0, 'lhsrawalt': '^GS', 'script': 0, 'mode_bits': 16, 'silent': 0, 'buffer': 0, 'scriptversion': 1}
    " return map(maplist(), {_, v -> s:format_maplist(v) })
  return map(map(maplist(), {k, v ->
        \ printf('%s  %-10s  %s%s',
        \   v.mode, v.lhs,
        \   v.rhs =~? '^<Plug>' ? '  ' : ((v.noremap ? '*' : '&' ).(v.buffer ? '@' : ' ')),
        \   v.rhs )
        \ }), { _, line -> #{
    \   word: line,
    \   kind: 'word',
    \   action: #{
    \     word: line,
    \   }
    \ } })
endfunction

nnoremap [!ddu] <Nop>
nmap f [!ddu]

nnoremap [!ddu]f f
nnoremap [!ddu]u :<C-u>Ddu<Space>
nnoremap <silent> [!ddu]<Space>  <Cmd>Ddu buffer<CR>
nnoremap <silent> [!ddu]j  <Cmd>Ddu buffer<CR>
nnoremap <silent> [!ddu]l  <Cmd>Ddu file<CR>
nnoremap <silent> [!ddu]m  <Cmd>Ddu mr<CR>
nnoremap <silent> [!ddu]p  <Cmd>Ddu register<CR>
nnoremap <silent> [!ddu]a  <Cmd>Ddu -name=file_rec<CR>
nnoremap <silent> [!ddu]y  <Cmd>call <SID>ddu_custom_list(
  \   sonictemplate#complete('', '', 0),
  \   g:vimrc_denops_callback_ids['cbfn_sonictemplate']
  \ )<CR>
nnoremap <silent> [!ddu]v  <Cmd>call <SID>ddu_custom_list([
  \   '~/.vim', '~/.zsh', '~/memos',
  \   ], g:vimrc_denops_callback_ids['ddu_file_rec']
  \ )<CR>
nnoremap <silent> [!ddu]gv  <Cmd>call <SID>ddu_custom_list([
  \   '~/.vim', '~/.zsh', '~/memos',
  \   ], g:vimrc_denops_callback_ids['ddu_grep_dir']
  \ )<CR>
nnoremap <silent> [!ddu]d  <Cmd>Ddu -name=filer<CR>

nnoremap <silent> [!ddu]q  <Cmd>Ddu -name=qf qf<CR>
nnoremap <silent> [!ddu]w  <Cmd>Ddu -name=qf<CR>

nnoremap <silent> [!ddu]hh  <Cmd>Ddu help<CR>
nnoremap <silent> [!ddu]hk  <Cmd>call ddu#start(#{sources: [
  \   #{ name: 'vim', params: #{ func: 'DduSourceKeymap' } }
  \ ]})<CR>
nnoremap <silent> [!ddu]hv  <Cmd>call ddu#start({'name': 'vim_type'})<CR>
nnoremap <silent> [!ddu]hm  <Cmd>call <SID>ddu_custom_list(
  \   keys(g:vimrc_ddu_menu_items), g:vimrc_denops_callback_ids['ddu_menu']
  \ )<CR>

nnoremap <silent> [!t]t  <Cmd>call <SID>ddu_taglist_immediately()<CR>
nnoremap <silent> <C-w>tt  <C-w>s<Cmd>call <SID>ddu_taglist_immediately()<CR>

nnoremap <silent> [!ddu]gg  <Cmd>Ddu rg -name=grep -source-param-rg-input='`'Pattern: '->input('<cword>'->expand())`'<CR>
nnoremap <silent> [!ddu]gr  <Cmd>call <SID>ddu_grep(input('Pattern: ', expand('<cword>')), input('Target Dir: ', expand('%:p:h'), 'file'))<CR>
nnoremap <silent> [!ddu]ge  <Cmd>Ddu -name=grep<CR>

nnoremap <silent> [!ddu]gl  <Cmd>Ddu line<CR>

nnoremap <silent> [!ddu]gs  <Cmd>Ddu -name=lsp<CR>
nnoremap <silent> [!ddu]gd  <Cmd>call <SID>ddu_custom_list([
  \   'lsp_definition', 'lsp_references', 'lsp_documentSymbol',
  \   'lsp_workspaceSymbol', 'lsp_callHierarchy', 'lsp_typeHierarchy',
  \   'lsp_codeAction', 'lsp_diagnostic',
  \ ], g:vimrc_denops_callback_ids['ddu_lsp'])<CR>


'''
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
[[plugins]]
repo = 'Shougo/ddu-commands.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
[[plugins]]
repo = 'Shougo/ddu-source-register'
[[plugins]]
repo = 'Shougo/ddu-source-line'
[[plugins]]
repo = 'shun/ddu-source-buffer'
[[plugins]]
repo = 'Shougo/ddu-source-file_old'
[[plugins]]
repo = 'tennashi/ddu-source-make'
[[plugins]]
repo = 'shun/ddu-source-rg'
[[plugins]]
repo = 'kuuote/ddu-source-mr'
[[plugins]]
repo = 'lambdalisue/vim-mr'
hook_add = '''
let g:mr#mru#filename = "~/.cache/mr/mru".(has('nvim')?'-nvim':'-vim')
let g:mr#mrr#filename = "~/.cache/mr/mrr".(has('nvim')?'-nvim':'-vim')
let g:mr#mrw#filename = "~/.cache/mr/mrw".(has('nvim')?'-nvim':'-vim')
'''
[[plugins]]
repo = 'matsui54/ddu-source-file_external'
[[plugins]]
repo = 'matsui54/ddu-source-help'
[[plugins]]
repo = 'Shougo/ddu-source-vim'
[[plugins]]
repo = 'flow6852/ddu-source-qf'
[[plugins]]
repo = 'kamecha/ddu-source-jumplist'
[[plugins]]
repo = 'Shougo/ddu-source-file_point'
[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'
[[plugins]]
repo = 'flow6852/ddu-source-vim_variable'
[[plugins]]
repo = 'flow6852/ddu-source-vim_option'
[[plugins]]
repo = 'flow6852/ddu-source-vim_function'
[[plugins]]
repo = 'flow6852/ddu-source-vim_command'
[[plugins]]
repo = 'flow6852/ddu-source-vim_event'
[[plugins]]
repo = 'uga-rosa/ddu-source-lsp'
[[plugins]]
repo = 'liquidz/ddu-source-custom-list'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
[[plugins]]
repo = 'Shougo/ddu-kind-file'
[[plugins]]
repo = 'Shougo/ddu-kind-word'
[[plugins]]
repo = '4513ECHO/ddu-kind-url'
[[plugins]]
repo = 'Shougo/ddu-column-filename'
[[plugins]]
repo = 'tennashi/ddu-kind-extcmd'
[[plugins]]
repo = 'flow6852/ddu-kind-vim_type'

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-snippets'
[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-neosnippet'

