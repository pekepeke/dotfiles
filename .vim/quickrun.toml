[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <expr><silent><C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
  nnoremap <Leader>r <Plug>(quickrun)
  nnoremap <Leader>qr <Plug>(quickrun)
  "silent! nmap <unique> <Space> <Plug>(quickrun)
  let g:quickrun_config=get(g:, 'quickrun_config', {})

  " objc {{{4
  call extend(g:quickrun_config, {
    \ 'objc/gcc' : {
    \   'command' : 'gcc',
    \   'exec' : ['%c %o %s -o %s:p:r -framework Foundation', '%s:p:r %a', 'rm -f %s:p:r'],
    \   'tempfile': '{tempname()}.m'
    \ },
    \ })
  if d#is_mac()
    call extend(g:quickrun_config, {
    \ 'objc' : {
    \   'type' : 'objc/xctool',
    \ },
    \ 'objc/xctool' : {
    \    'command': 'xctool',
    \    'cmdopt': 'test',
    \    'outputter': 'xctool',
    \    'exec': ['%c %o %a'],
    \ },
    \ 'swift' : {
    \   'type' : 'swift/xcrun',
    \ },
    \ 'swift/xcrun' : {
    \    'command': 'xcrun swift',
    \    'cmdopt': '-i',
    \    'outputter': 'xctool',
    \    'exec': ['%c %s %o %a'],
    \ },
    \ })
  else
    call extend(g:quickrun_config, {
    \ 'objc' : {
    \   'type' : 'objc/gcc',
    \ },
    \ })
  endif
  " gcc {{{4
  call extend(g:quickrun_config, {
  \ 'cpp': {
  \   'type' : 'cpp/clang++',
  \ },
  \ 'cpp/gcc': {
  \   'command' : 'g++',
  \   'cmdopt' : '-std=c++11 -Wall -Wextra',
  \   'hook/quickrunex/enable' : 1,
  \ },
  \ 'cpp/clang++': {
  \   'command' : 'clang++',
  \   'cmdopt' : '-std=c++1y -Wall -Wextra',
  \   'hook/quickrunex/enable' : 1,
  \ },
  \ })
  " go {{{4
  call extend(g:quickrun_config, {
  \ 'go/8g' : {
  \   'command': '8g',
  \   'exec': ['8g %s', '8l -o %s:p:r %s:p:r.8', '%s:p:r %a', 'rm -f %s:p:r'],
  \ },
  \ })
  " csharp {{{4
  call extend(g:quickrun_config, {
  \ 'cs' : {
  \   'type' : executable('csc') ? 'cs/csc':
  \            executable('cs') ? 'cs/cs': '',
  \ },
  \ 'cs/csc' : {
  \   'command' : 'csc',
  \   'runmode' : 'simple',
  \   'exec' : ['%c /nologo %s:gs?/?\\? > /dev/null', '"%S:p:r:gs?/?\\?.exe" %a', ':call delete("%S:p:r.exe")'],
  \   'tempfile' : '{tempname()}.cs',
  \ },
  \ 'cs/cs' : {
  \   'command' : 'cs',
  \   'runmode' : 'simple',
  \   'exec' : ['%c %s > /dev/null', 'mono "%S:p:r:gs?/?\\?.exe" %a', ':call delete("%S:p:r.exe")'],
  \   'tempfile' : '{tempname()}.cs',
  \ },
  \ })
  if d#is_win() && executable('C:\Program Files (x86)\LINQPad4\LPRun.exe')
    let g:quickrun_config['cs/lprun'] = {
      \   'command': 'C:\Program Files (x86)\LINQPad4\LPRun.exe',
      \ , 'cmdopt': '-lang=S',
      \ , 'exec': '%c:gs?/?\\? %o %s',
      \ , 'tempfile': '%{tempname()}.cs',
      \ , 'hook/output_encode/encoding': '&termencoding',
      \ , 'hook/sweep/files': ['%S:p:r.exe'],
      \ }
  endif
  " html {{{4
  call extend(g:quickrun_config, {
  \ 'html' : {
  \   "type" : "html/haml"
  \ },
  \ 'html/haml' : {
  \   "command" : "html2haml"
  \ },
  \ 'html/haml_repace' : {
  \   "outputter" : "error",
  \   "outputter/success" : "replace_region",
  \   "outputter/error"   : "message",
  \   "outputter/message/log"   : 1,
  \   "runner" : "system",
  \   "type" : "html/haml"
  \ },
  \})
  " javascript {{{4
  call extend(g:quickrun_config, {
  \ 'json': {
  \   'type': 'json/jq',
  \ },
  \ 'coffee/coffee2javascript' : {
  \    'command': 'coffee',
  \    'cmdopt': '-pb',
  \    'outputter/buffer/filetype': 'javascript',
  \ },
  \ 'json/jq': {
  \   'command': 'jq',
  \ },
  \ })

  call extend(g:quickrun_config, {
  \ 'javascript/babel': {
  \   'cmdopt': '',
  \   'exec': "babel %o %s",
  \   'outputter/buffer/filetype': 'javascript',
  \ }})

  " call extend(g:quickrun_config, {
  " \ 'jsx' : {
  " \   'type' : 'denajsx/jsx',
  " \ },
  " \ 'denajsx/jsx' : {
  " \   'command': 'jsx',
  " \   'exec' : '%c %o --run %s',
  " \ },
  " \ })

  " css {{{4
  call extend(g:quickrun_config, {
  \ 'slim' : {
  \   'type' : 'slim/slimrb',
  \ },
  \ 'slim/slimrb' : {
  \   'command' : 'slimrb',
  \   'exec' : ['%c %o -p %s'],
  \ },
  \ })
  " rspec {{{4
  " http://qiita.com/joker1007/items/9dc7f2a92cfb245ad502
  call extend(g:quickrun_config, {
  \ 'ruby.rspec' : {
  \   'type' : 'ruby/rspec',
  \ },
  \ 'ruby/rspec' : {
  \   'command' : 'rspec',
  \   'exec' : '%c %o -l {line(".")}',
  \ },
  \ 'ruby.rspec/rspec_bundle': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'bundle exec %c %o --color --tty %s'
  \ },
  \ 'ruby.rspec/rspec_normal': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': '%c %o --color --tty %s'
  \ },
  \ 'ruby.rspec/rspec_zeus': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'zeus test %o --color --tty %s'
  \ },
  \ 'ruby.rspec/rspec_spring': {
  \   'command': 'rspec',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'spring rspec %o --color --tty %s'
  \ },
  \ 'ruby/cucumber_bundle': {
  \   'command': 'cucumber',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'bundle exec %c %o --color %s'
  \ },
  \ 'ruby/cucumber_zeus': {
  \   'command': 'cucumber',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'zeus cucumber %o --color %s'
  \ },
  \ 'ruby/cucumber_spring': {
  \   'command': 'cucumber',
  \   'outputter/buffer/split': 'botright',
  \   'exec': 'spring cucumber %o --color %s'
  \ },
  \ })

  " tests {{{4
  call extend(g:quickrun_config, {
  \ 'python.nosetests' : {
  \   'type' : 'python/nosetests',
  \ },
  \ 'perl.prove' : {
  \   'type' : 'perl/prove',
  \ },
  \ 'php.phpunit' : {
  \   'type' : 'php/phpunit',
  \ },
  \ 'python/nosetests' : {
  \   'command' : 'nosetests',
  \   'cmdopt': '-s -vv',
  \ },
  \ 'php/phpunit' : {
  \   'command' : 'phpunit',
  \ },
  \ 'perl/prove' : {
  \   'command' : 'prove',
  \ },
  \ })

  function! s:build_options(vars, ...) "{{{5
    let opts = []
    for [field, fmt] in items(a:vars)
      let value = get(b:, field, get(g:, field, ''))
      if !empty(value)
        call add(opts, printf(fmt, value))
      endif
    endfor

    return join(opts, " ")
  endfunction "}}}

  function! s:str_prepend(val, ch)
    return empty(a:val) ? "" : a:ch . a:val
  endfunction

  function! s:build_sqlplus_options() "{{{5
    let opts = []
    let vars = [
      \ 'dbext_user',
      \ 'dbext_passwd',
      \ 'dbext_host',
      \ 'dbext_port',
      \ 'dbext_dbname',
      \ ]
    let [user, pass, host, port, db] = map(vars, 'get(b:, field, get(g:, field, ""))')
    return printf("%s%s@%s%s%s", user,
      \ s:str_prepend(pass, "/"),
      \ host,
      \ s:str_prepend(port, ":"),
      \ s:str_prepend(db, "/")
      \ )
  endfunction " }}}
  function! MySQLCommandOptions() "{{{5
    if exists('b:MYSQL_cmd_options')
      return b:MYSQL_cmd_options
    endif
    return s:build_options({
          \ 'dbext_host': '-h %s',
          \ 'dbext_user': '-u %s',
          \ 'dbext_passwd': '-p%s',
          \ 'dbext_port': '-P %s',
          \ 'dbext_dbname': '%s',
          \ })
  endfunction "}}}
  function! PgSQLCommandOptions() "{{{5
    if exists('b:PGSQL_cmd_options')
      return b:PGSQL_cmd_options
    endif
    return s:build_options({
      \ 'dbext_host': '-h %s',
      \ 'dbext_user': '-u %s',
      \ 'dbext_port': '-p %s',
      \ 'dbext_dbname': '-d %s',
      \ })
  endfunction "}}}
  function! OracleCommandOptions() "{{{5
    if exists('b:SQLPLUS_cmd_options')
      return b:PGSQL_cmd_options
    endif

    return s:build_sqlplus_options()
  endfunction

  " configs{{{4
  call extend(g:quickrun_config, {
  \ 'mysql' : {
  \   'type' : 'sql/mysql',
  \ },
  \ 'sql' : {
  \   'type' : 'sql/postgresql',
  \ },
  \ 'sql/mysql' : {
  \   'command' : 'mysql',
  \   'cmdopt': '%{MySQLCommandOptions()}',
  \   'exec' : ['%c %o < %s'],
  \ },
  \ 'sql/postgresql': {
  \   'command' : 'psql',
  \   'cmdopt': '%{PgSQLCommandOptions()}',
  \   'exec': ['%c %o -f %s'],
  \ }
  \ })
  " texts {{{4
  call extend(g:quickrun_config, {
  \ 'text/glance' : {
  \   'runner' : 'vimscript',
  \   'exec' : 'Glance',
  \   'outputter' : 'null',
  \ }})
  call extend(g:quickrun_config, {
  \ 'text/previm' : {
  \   'runner' : 'vimscript',
  \   'exec' : 'silent PrevimOpen %o',
  \   'outputter' : 'null',
  \ }})
  if d#is_installed('glance')
    call extend(g:quickrun_config, {
    \ 'markdown': { 'type': 'text/glance' },
    \ })
  elseif d#is_installed('previm')
    call extend(g:quickrun_config, {
    \ 'markdown': { 'type': 'text/previm' },
    \ 'rst': { 'type': 'text/previm' },
    \ 'textile': { 'type': 'text/previm' },
    \ })
  else
    call extend(g:quickrun_config, { 'rst': { 'type': 'rst/rst2html', }})
    call extend(g:quickrun_config, {
    \ 'markdown' : {
    \   'type' :
    \      d#is_mac() && isdirectory('/Applications/Marked.app') ? 'markdown/Marked':
    \      executable('markedwrapper')    ? 'markdown/markedwrapper':
    \      executable('mdown')            ? 'markdown/mdown':
    \      executable('pandoc')           ? 'markdown/pandoc':
    \      executable('multimarkdown')    ? 'markdown/multimarkdown':
    \      executable('MultiMarkdown.pl') ? 'markdown/MultiMarkdown.pl':
    \      executable('rdiscount')        ? 'markdown/rdiscount':
    \      executable('bluecloth')        ? 'markdown/bluecloth':
    \      executable('markdown')         ? 'markdown/markdown':
    \      executable('Markdown.pl')      ? 'markdown/Markdown.pl':
    \      executable('redcarpet')        ? 'markdown/redcarpet':
    \      executable('kramdown')         ? 'markdown/kramdown':
    \      '',
    \   'outputter' : 'browser',
    \ },
    \ })
  endif

  call extend(g:quickrun_config, {
  \ 'markdown/markedwrapper' : {
  \   'command' : 'markedwrapper',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/mdown' : {
  \   'command' : 'mdown',
  \   'exec' : '%c %o -i %s',
  \ },
  \ 'markdown/Marked' : {
  \   'command' : 'open',
  \   'outputter' : 'null',
  \   'exec' : '%c -a Marked %o %s',
  \ },
  \ 'markdown/multimarkdown' : {
  \   'command' : 'multimarkdown',
  \ },
  \ 'markdown/rdiscount' : {
  \   'command' : 'rdiscount',
  \ },
  \ 'markdown/markdown' : {
  \   'command' : 'markdown',
  \ },
  \ })

  " script langs {{{4
  call extend(g:quickrun_config, {
  \ 'processing' : {
  \   'type' : executable('processing-java') ? 'processing/processing-java' :
  \            executable('osascript') ? 'processing/osascript':
  \            '',
  \ },
  \ 'applescript' : {
  \   'type' : executable('osascript') ? 'applescript/osascript':
  \            '',
  \ },
  \ 'diag' : {
  \   'type' : 'diag/diag',
  \ },
  \ })
  call extend(g:quickrun_config, {
  \ 'processing/osascript' : {
  \   'command': 'osascript',
  \   'exec' : ['osascript %o ' . globpath(&runtimepath, 'bin/runPSketch.scpt'). ' %s:p:h:t']
  \ },
  \ 'processing/processing-java' : {
  \   'command': 'processing-java',
  \   'exec' : '%c %o --sketch=$PWD/ --output=/Library/Processing --run --force',
  \ },
  \ 'applescript/osascript' : {
  \   'command' : 'osascript',
  \   'output' : '_',
  \ },
  \ 'diag/diag' : {
  \   'exec': [
  \      '%c -a %s -o %{expand("%:r")}.png',
  \      printf("%s %{expand(%:r)}.png %s",
  \        d#is_win() ? 'explorer' : (d#is_mac() ? 'open -g' : 'xdg-open'),
  \        d#is_win() ? "" : "&"),
  \   ],
  \   'outputter': 'message',
  \ },
  \ })
  call extend(g:quickrun_config, {
  \ 'command/cat' : {
  \   'command' : 'cat',
  \   'exec' : ['%c %o %s'],
  \ },
  \ })

  " TODO : not work
  call extend(g:quickrun_config, {
  \ 'w3m' : {
  \   'type' : 'w3m/open',
  \ },
  \ 'w3m/open': {
  \   'command': (d#is_win() ? 'start ""' : (d#is_mac() ? "open" : "xdg-open")),
  \   'exec': [
  \     '%c %o "%{b:last_url}"',
  \   ],
  \ }
  \ })

  nnoremap <Leader><Leader>r :<C-u>QuickRun command/cat<CR>
  function! s:vimrc_quickrun_init() "{{{4
    nmap <buffer> q :quit<CR>
  endfunction "}}}
  MyAutoCmd FileType quickrun call <SID>vimrc_quickrun_init()
'''

[[plugins]]
repo = 'mattn/quickrunex-vim'
[[plugins]]
repo = 'manicmaniac/vim-quickrun-qo'
# [[plugins]]
# repo = 'tokorom/vim-quickrun-xctool'
# repo = "osyo-manga/unite-quickrun_config"
[[plugin]]
repo = 'pekepeke/quicklearn'
hook_add = '''
let g:quicklearn = get(g:, 'quicklearn', {})
call extend(g:quicklearn, {
  \ 'markdown/md2remark/intermediate' : {
  \   'command' : 'md2remark',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/md2backlog/intermediate' : {
  \   'command' : 'md2backlog',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/vim-helpfile/intermediate' : {
  \   'command' : 'vim-helpfile',
  \   'exec' : '%c %o %s',
  \ },
  \ 'markdown/markdown2pod/intermediate' : {
  \   'command' : 'markdown2pod',
  \   'exec' : '%c %o %s',
  \ },
  \ })
call extend(g:quicklearn, {
  \ 'markdown/textile/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t textile %o %s',
  \ },
  \ 'markdown/rst/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t rst %o %s',
  \ },
  \ 'markdown/html5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t html5 %o %s',
  \ },
  \ 'markdown/mediawiki/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t mediawiki %o %s',
  \ },
  \ 'markdown/s5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t s5 %o %s',
  \ },
  \ 'markdown/revealjs/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t revealjs %o %s',
  \ },
  \ 'markdown/dzslides/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t dzslides %o %s',
  \ },
  \ 'markdown/slidy/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t slidy %o %s',
  \ },
  \ 'markdown/slideous/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t slideous %o %s',
  \ },
  \ 'markdown/beamer/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t beamer %o %s',
  \ },
  \ 'markdown/latex/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t latex %o %s',
  \ },
  \ 'markdown/rtf/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f markdown -t rtf %o %s',
  \ },
  \ })
call extend(g:quicklearn, {
  \ 'textile/markdown/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t markdown %o %s',
  \ },
  \ 'textile/rst/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t rst %o %s',
  \ },
  \ 'textile/html5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t html5 %o %s',
  \ },
  \ 'textile/mediawiki/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t mediawiki %o %s',
  \ },
  \ 'textile/s5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t s5 %o %s',
  \ },
  \ 'textile/slidy/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t slidy %o %s',
  \ },
  \ 'textile/slideous/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t slideous %o %s',
  \ },
  \ 'textile/beamer/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t beamer %o %s',
  \ },
  \ 'textile/latex/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t latex %o %s',
  \ },
  \ 'textile/rtf/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f textile -t rtf %o %s',
  \ },
  \ })
call extend(g:quicklearn, {
  \ 'rst/markdown/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t markdown %o %s',
  \ },
  \ 'rst/textile/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t textile %o %s',
  \ },
  \ 'rst/html5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t html5 %o %s',
  \ },
  \ 'rst/mediawiki/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t mediawiki %o %s',
  \ },
  \ 'rst/s5/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t s5 %o %s',
  \ },
  \ 'rst/slidy/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t slidy %o %s',
  \ },
  \ 'rst/slideous/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t slideous %o %s',
  \ },
  \ 'rst/beamer/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t beamer %o %s',
  \ },
  \ 'rst/latex/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t latex %o %s',
  \ },
  \ 'rst/rtf/intermediate': {
  \   'command': 'pandoc',
  \   'exec' : '%c -f rst -t rtf %o %s',
  \ },
  \ })
  call extend(g:quicklearn, {
  \ 'rst/rst2html/intermediate': {
  \   'command': 'rst2html',
  \   'exec': '%c %o %s',
  \ },
  \ })
'''
