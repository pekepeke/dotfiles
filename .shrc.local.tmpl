# vim:fdm=marker sw=2 ts=2 ft=sh expandtab:

## zshrc flags
# if [ -n "$ZSH_NAME" ]; then
#   typeset -A ZSH_DISABLES
#   ZSH_DISABLES[vcs]=1
#   ZSH_DISABLES[zsh-syntax-highlighting]=1
#   ZSH_DISABLES[autojump]=1
#   export ZSH_DISABLES
# fi

## pbcopy
# export PBCOPY_SERVER="http://$(echo $SSH_CLIENT | awk '{print $1}'):10051"
# export LEMONADE_SERVER=$(echo $SSH_CLIENT | awk '{print $1}')
# if [ -z "$DISPLAY" ]; then
#   export DISPLAY=localhost:10.0
# fi

# BING_CLIENTID=""
# BING_CLIENTSECRET=""
# export BING_CLIENTID BING_CLIENTSECRET

## vimrc flags
VIMRC_ENABLES=""
# VIMRC_ENABLES="$VIMRC_ENABLES us-keyboard"
# VIMRC_ENABLES="$VIMRC_ENABLES jvgrep"
# VIMRC_ENABLES="$VIMRC_ENABLES git_under1.8"
# VIMRC_ENABLES="$VIMRC_ENABLES rails sinatra"
# VIMRC_ENABLES="$VIMRC_ENABLES django"
# VIMRC_ENABLES="$VIMRC_ENABLES dart haxe"
# VIMRC_ENABLES="$VIMRC_ENABLES vbnet"
# VIMRC_ENABLES="$VIMRC_ENABLES haskell"
## requires gcc, cmake, java, ant, x11 or xvfb
# VIMRC_ENABLES="$VIMRC_ENABLES asyncomplete"
# VIMRC_ENABLES="$VIMRC_ENABLES ycm eclim"
# VIMRC_ENABLES="$VIMRC_ENABLES coc"
# VIMRC_ENABLES="$VIMRC_ENABLES deoplete"
# VIMRC_ENABLES="$VIMRC_ENABLES phpcd"
# VIMRC_ENABLES="$VIMRC_ENABLES padawan"
# VIMRC_ENABLES="$VIMRC_ENABLES phpcomplete-extended"
# VIMRC_ENABLES="$VIMRC_ENABLES phphtml"
# VIMRC_ENABLES="$VIMRC_ENABLES cakephp laravel symfony"
# VIMRC_ENABLES="$VIMRC_ENABLES laravel"
export VIMRC_ENABLES

# for coc.nvim
# npm i -g yarn
# CocInstall coc-json coc-html coc-css coc-solargraph coc-yaml coc-python coc-phpls coc-vimlsp coc-marketplace

# export ECLIPSE_HOME="$PROGRAMFILES\\Eclipse Foundation\\4.4.2\\eclipse"
# export ECLIPSE_HOME="$HOME\\eclipse"
# export ECLIPSE_HOME=~/eclipse

# export JAVA_HOME=/usr/lib/jvm/java-8-oracle

# eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)

## github
# ghrize() {
#   git config --local remote.origin.url "$(git config remote.origin.url | sed -e 's!@github.com:!@xxxx.github.com:!')"
#   git config --local user.name 'xxx'
#   git config --local user.email 'xxx@xxx.xx'
#   git config --local --list
# }

# git issue
# gcissue-redmine() {
#   git config issue.type redmine
#   git config issue.apiKey xxxx
#   git config issue.url http://hoge.redmine.jp/
# }
# gcissue-github() {
#   git config issue.repo github
#   git config issue.user username
#   # EDITOR=vim pit set github
# # cat <<EOM
# # ---
# # user: account
# # password: password
# # EOM
# }

## telnet
# alias telnet-xxx-prod='telnet -8 -l xxx -K host port'

## EC2
# export EC2_HOME="/usr/local/Cellar/ec2-api-tools/1.6.13.0/libexec"
# export EC2_HOME="$(find /usr/local/Cellar/ec2-api-tools/*/libexec -type d -depth 0 | sort -nr | head -1)"
# export EC2_URL=http://ec2.ap-northeast-1.amazonaws.com
# export AWS_DEFAULT_PROFILE=default
# aws_xxx() {
#   export AWS_DEFAULT_PROFILE=xxx
# }

## gem install ec2list
# ec2ssh() {
#   local PROFILE=$1
#   if [ x"$PROFILE" = x ]; then
#     PROFILE=default
#   fi
#   local selected_host=$(ec2list --profile=$PROFILE | peco | cut -f 3)
#   if [ -n "${selected_host}" ]; then
#     if [ -n "$ZSH_NAME" ]; then
#       BUFFER="ssh ${selected_host}"
#       zle accept-line
#     else
#       ssh $selected_host
#     fi
#   fi
# }
# alias sshec2xxx="ec2ssh profile -l user -i ~/.ssh/keys/id_rsa.pem -o StrictHostKeyChecking=no"
# __aws_profile_print() {
#   local C=$AWS_PROFILE
#   [ -z "$C" ] && C=default
#   cat <<EOM
# $(echo "$C <- current")
# $(/usr/bin/python -c 'import os,ConfigParser,re; ini = ConfigParser.SafeConfigParser(); ini.read(os.getenv("HOME")+"/.aws/config"); print( "\n".join(map(lambda v: re.sub("^profile\\s*", "", v), ini.sections())))')
# EOM
# }
# # $(python3 -c 'import os,configparser,re; ini = configPArser.SafeConfigParser(); ini.read(os.getenv("HOME")+"/.aws/config"); print( "\n".join(map(lambda v: re.sub("^profile\\s*", "", v), ini.sections())))')
# aws-pp() {
#   local P="$(__aws_profile_print | peco | awk '{ print $1 }')"

#   export AWS_PROFILE=$P
# }
# export AWS_PROFILE=default

# if [ -f '/opt/google-cloud-sdk/path.zsh.inc' ]; then source '/opt/google-cloud-sdk/path.zsh.inc'; fi
# if [ -f '/opt/google-cloud-sdk/completion.zsh.inc' ]; then source '/opt/google-cloud-sdk/completion.zsh.inc'; fi
# source <(kubectl completion zsh)

# export SDKMAN_DIR="$HOME/.sdkman"
# [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# [ -n "$ZSH_VERSION" ] && eval "$(direnv hook zsh)"
# [ -n "$BASH" ] && eval "$(direnv hook bash)"

# aider
# export ANTHROPIC_API_KEY=
# export OPENAI_API_KEY=

